
    var pageVueRenderFn = function anonymous(
) {
with(this){return _c('div',{attrs:{"id":"app"}},[_c('header',{attrs:{"fixed":""}},[_c('navbar',{attrs:{"placement":"top","type":"primary"},scopedSlots:_u([{key:"brand",fn:function(){return [_c('a',{staticClass:"navbar-brand",attrs:{"href":"/2023/index.html","title":"Home"}},[_v("CS3281&2-2023/Students")])]},proxy:true},{key:"right",fn:function(){return [_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"https://github.com/nus-cs3281/2023"}},[_c('span',[_c('span',{staticClass:"fab fa-github",attrs:{"aria-hidden":"true"}})])])])]},proxy:true}])},[_v(" "),_c('dropdown',{staticClass:"nav-link",scopedSlots:_u([{key:"header",fn:function(){return [_v("CS3281")]},proxy:true}])},[_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/2023/index.html"}},[_v("Students")])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/2023/students/knowledge.html"}},[_v("Knowledge")])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"https://nus-cs3281.github.io/2023-dashboard/?search=&sort=groupTitle&sortWithin=title&timeframe=commit&mergegroup=&groupSelect=groupByAuthors&breakdown=false"}},[_v("Code Dashboard")])])]),_v(" "),_c('dropdown',{staticClass:"nav-link",scopedSlots:_u([{key:"header",fn:function(){return [_v("CS3282")]},proxy:true}])},[_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/2023/cs3282-index.html"}},[_v("Students")])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/2023/students/talksSchedule.html"}},[_v("Lightning Talks")])])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/2023/instructions.html"}},[_v("Instructions")])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"https://nus-cs3281.github.io/website/"}},[_v("CS3281&2 Website "),_c('span',[_c('span',{staticClass:"glyphicon glyphicon-share-alt",attrs:{"aria-hidden":"true"}})])])])],1)],1),_v(" "),_c('div',{attrs:{"id":"flex-body"}},[_m(0),_v(" "),_c('overlay-source',{staticClass:"fixed-header-padding",attrs:{"id":"page-nav","tag-name":"nav","to":"page-nav"}},[_c('div',{staticClass:"nav-component slim-scroll"})])],1),_v(" "),_m(1)])}
};
    var pageVueStaticRenderFns = [function anonymous(
) {
with(this){return _c('div',{staticClass:"fixed-header-padding",attrs:{"id":"content-wrapper"}},[_c('h1',{attrs:{"id":"cs3282-semester-knowledge-gained"}},[_c('span',{staticClass:"anchor",attrs:{"id":"cs3282-semester-knowledge-gained"}}),_v("CS3282 Semester Knowledge Gained"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#cs3282-semester-knowledge-gained","onclick":"event.stopPropagation()"}})]),_v(" "),_c('h2',{attrs:{"id":"kotlin"}},[_c('span',{staticClass:"anchor",attrs:{"id":"kotlin"}}),_v("Kotlin"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#kotlin","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("Kotlin is a relatively newer programming language (July 2011) that runs on the JVM. It was designed to be interoperable with Java and supports most of the same features\nthat Java is known for, such as OOP programming paradigms like inheritance, polymorphism, etc. Being a newer language, it also aims to address some of the issues that Java\nfaces. The most prominent examples that I have encountered are the following")]),_v(" "),_c('ul',[_c('li',[_v("Null safety is built into the language compared to Java which helps avoid null pointer exceptions. Declaring a type with a '?' is equivalent to declaring an object as an "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Optional")]),_v(" in Java.\nFor example, a Kotlin declaration "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("s : String?")]),_v(" allows for the variable "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("s")]),_v(" to be a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("null")]),_v(" while for "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("s : String")]),_v(", attempting to assign "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("s = null")]),_v(" will automatically cause an exception.\n"),_c('ul',[_c('li',[_v("This is opposed to Java where null safety requires us to use "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Optional<T>")]),_v(" with the desired class which can make declarations somewhat cumbersome.")]),_v(" "),_c('li',[_v("Similar to Java's "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Optional")]),_v(" methods, the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("String?")]),_v(" has equivalent methods. "),_c('a',{attrs:{"href":"https://typealias.com/guides/java-optionals-and-kotlin-nulls/"}},[_v("Reference link")]),_v(".")])])])]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("// Java\n")]),_c('span',[_v("Optional<String> s = Optional.of(\"test\");\n")]),_c('span',[_v("s1.map(s -> \"another string\") \n")]),_c('span',[_v("s1.ifPresent(System.out::println);\n")]),_c('span',[_v("\n")]),_c('span',[_v("// Kotlin\n")]),_c('span',[_v("s1 : String? = \"test\"\n")]),_c('span',[_v("s1.let{ \"another string\" }\n")]),_c('span',[_v("s1.also{ println(it) } \n")])])]),_c('ul',[_c('li',[_v("Kotlin has better support for functional programming, including lambdas and higher order functions which are far more convenient\nto deal with than the equivalent SAMs in Java.")]),_v(" "),_c('li',[_v("Getters and setters are automatically implemented based on the attribute names in Kotlin.")])]),_v(" "),_c('h2',{attrs:{"id":"android-development-in-android-studio"}},[_c('span',{staticClass:"anchor",attrs:{"id":"android-development-in-android-studio"}}),_v("Android development in Android Studio"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#android-development-in-android-studio","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("Android Studio is an IDE extremely similar to IntelliJ with most of the same features but also supports additional features that help with Android app development.")]),_v(" "),_c('ul',[_c('li',[_v("Virtual Machine simulation: Able to simulate various android devices at varying levels of Android SDK levels in order to build and run an app as if I was using it on my own device.\n"),_c('ul',[_c('li',[_v("There are limitations to this as it seems there are certain bugs that only occur on the real devices in which the VM simulation is another to test.")]),_v(" "),_c('li',[_v("Each individual SDK level has to be installed and they are quite large (usually a few GB)")])])]),_v(" "),_c('li',[_v("Debug mode in VM simulation: Similar to IntelliJ's debug mode, there is one that works together with the Virtual Android phone that can be used for testing.")])]),_v(" "),_c('h2',{attrs:{"id":"mockito"}},[_c('span',{staticClass:"anchor",attrs:{"id":"mockito"}}),_v("Mockito"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#mockito","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("Mockito is an open source Java-based mocking framework used for testing Java applications. THey help to create fake objects of a class or interface\nto help with testing classes in isolation. A standard use case would look something like this:")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("class TestClass {\n")]),_c('span',[_v("  void methodToTest(ClassWithInt classWithInt) {\n")]),_c('span',[_v("    if (classWithInt.getInt() > 0) {\n")]),_c('span',[_v("      positiveResult();\n")]),_c('span',[_v("    } else {\n")]),_c('span',[_v("      negativeResult();\n")]),_c('span',[_v("    }\n")]),_c('span',[_v("  }\n")]),_c('span',[_v("}\n")]),_c('span',[_v("\n")]),_c('span',[_v("class TestClassTest {\n")]),_c('span',[_v("  @mock // creates a 'fake object'\n")]),_c('span',[_v("  ClassWithInt mockedInput\n")]),_c('span',[_v("  \n")]),_c('span',[_v("  void test() {\n")]),_c('span',[_v("    TestClass testObject = new TestClass();\n")]),_c('span',[_v("    `when`(mockedInput.getInt()).thenReturn(1); // causes the mocked object to return 1 on this method call\n")]),_c('span',[_v("    testObject.methodToTest(mockedInput); // runs the method once\n")]),_c('span',[_v("    verify(testObject).positiveResult(); // checks if the method positiveResult is run as expected\n")]),_c('span',[_v("    \n")]),_c('span',[_v("    `when`(mockedInput.getInt()).thenReturn(-1); // note now the mock returns a negative integer\n")]),_c('span',[_v("    testObject.methodToTest(mockedInput);\n")]),_c('span',[_v("    verify(testObject).negativeResult();    \n")]),_c('span',[_v("  }\n")]),_c('span',[_v("}\n")])])]),_c('p',[_v("Above, I described a simple use case for Mockito in mocking. The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("@mock")]),_v(", "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("when")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("verify")]),_v(" are Mockito imports. There are many other features to help with mocking and testing these mocks.\nFor example, we can assert that a method is invoked with specific arguments, or a method is invoked n number of times, where n could be 0.")]),_v(" "),_c('p',[_v("These are helpful for white-box testing to be sure that certain methods are invoked given certain conditions to prevent code from regressing. However,\nwe have to be careful with the use of mocking as it does not involve the actual dependencies that might have slightly different behavior.")]),_v(" "),_c('h2',{attrs:{"id":"mvp-vs-mvc"}},[_c('span',{staticClass:"anchor",attrs:{"id":"mvp-vs-mvc"}}),_v("MVP vs MVC"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#mvp-vs-mvc","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("Model View Presenter (MVP) is a different architectural pattern from Model View Controller (MVC) for the use of separation of concerns between business and UI layers.\nThey generally help to make testing easier and hide data access. "),_c('a',{attrs:{"href":"https://www.baeldung.com/mvc-vs-mvp-pattern"}},[_v("Source for information and additional reading")]),_v(".")]),_v(" "),_c('p',[_v("MVC:")]),_v(" "),_c('ul',[_c('li',[_v("Model: The model handles the state of the system and contains the logic of how the different parts affect each other.")]),_v(" "),_c('li',[_v("View: Renders the UI for the user to view. Usually updated by Model.")]),_v(" "),_c('li',[_v("Controller: Based on user responses, the Controller uses Model to make the appropriate updates.")])]),_v(" "),_c('p',[_v("A common pitfall of MVC then becomes that the View module becomes a single class that is tightly coupled with Model and makes it extremely hard to test in isolation.")]),_v(" "),_c('p',[_v("MVP:")]),_v(" "),_c('ul',[_c('li',[_v("Model: Similar, handles the state of the system and contains logic of how different aspects of the internal model affect each other.")]),_v(" "),_c('li',[_v("View: Responible for rendering UI for the user to view. When interacted with, it communicates these in the form of 'user events' to the Presenter.")]),_v(" "),_c('li',[_v("Presenter: Receives user events from View and updates Model with the user events. After Model updates its internal state, it sends these 'state change events' to the Presenter which then updates View.")])]),_v(" "),_c('p',[_v("In this design, it is much easier to separately test View and Model with mocks for Presenter. Similarly, Presenter can also be tested, albeit slightly more difficult.\nHowever, Presenter has more responsibilities than its 'equivalent' in Controller as it has to control both Model updates and how to then present these state changes to View.")]),_v(" "),_c('h1',{attrs:{"id":"previous-knowledge-gained"}},[_c('span',{staticClass:"anchor",attrs:{"id":"previous-knowledge-gained"}}),_v("Previous knowledge gained"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#previous-knowledge-gained","onclick":"event.stopPropagation()"}})]),_v(" "),_c('h2',{attrs:{"id":"filesystems-bash-and-cmd"}},[_c('span',{staticClass:"anchor",attrs:{"id":"filesystems-bash-and-cmd"}}),_v("FileSystems, Bash and CMD"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#filesystems-bash-and-cmd","onclick":"event.stopPropagation()"}})]),_v(" "),_c('h3',{attrs:{"id":"specifying-file-paths-in-command-line-arguments"}},[_c('span',{staticClass:"anchor",attrs:{"id":"specifying-file-paths-in-command-line-arguments"}}),_v("Specifying File Paths in Command Line Arguments"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#specifying-file-paths-in-command-line-arguments","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("General:")]),_v(" "),_c('ul',[_c('li',[_v("File path arguments should nearly always be wrapped in quotation marks to accommodate file paths containing spaces.")])]),_v(" "),_c('p',[_v("For UNIX file systems:")]),_v(" "),_c('ul',[_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("/")]),_v(" is the separator used by UNIX systems")]),_v(" "),_c('li',[_v("UNIX file systems allows for virtually any character to be used in the filename except "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("/")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("null")]),_v(" (and some specific restricted names). As such, filenames and paths containing non-standard characters\ncan lead to unexpected errors in program execution. It is important to be aware of such a possibility.\n"),_c('ul',[_c('li',[_v("For example, in RepoSense, a local repository's path is first read as input and then used as a String in a CLI argument. A valid \\ character in a filename\nwill end up behaving as an escape character in the new CLI command.")])])])]),_v(" "),_c('p',[_v("For Windows file systems:")]),_v(" "),_c('ul',[_c('li',[_v("\\ is the separator for Windows file systems. However, it is also compatible with "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("/")]),_v(". All "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("/")]),_v(" read in a file path are\nreplaced with \\ as per Microsoft's "),_c('a',{attrs:{"href":"https://docs.microsoft.com/en-us/dotnet/standard/io/file-path-formats#canonicalize-separators"}},[_v("documentation")]),_v(".")]),_v(" "),_c('li',[_v("Java's implementation of the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Paths::get")]),_v(" method performs Windows file path validation if run on a Windows system. However, if used in a test method run from UNIX, the behaviour will differ.")])]),_v(" "),_c('h3',{attrs:{"id":"relative-and-absolute-file-pathing-specifics"}},[_c('span',{staticClass:"anchor",attrs:{"id":"relative-and-absolute-file-pathing-specifics"}}),_v("Relative and Absolute File Pathing Specifics"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#relative-and-absolute-file-pathing-specifics","onclick":"event.stopPropagation()"}})]),_v(" "),_c('ul',[_c('li',[_v("Both "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("./")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("../")]),_v(" function similarly in both UNIX and Windows (replacing "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("/")]),_v(" with \\).")]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("~")]),_v(" is an absolute pathing feature used in "),_c('a',{attrs:{"href":"https://www.gnu.org/software/bash/manual/html_node/Tilde-Expansion.html#Tilde-Expansion"}},[_v("Bash")]),_v(" which expands to the\nuser's home directory.\n"),_c('ul',[_c('li',[_v("If tilde expansion is used as follows: "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("~chan-jd/\"some file path\"/")]),_v(" then "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("~chan-jd")]),_v(" is expanded to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("$HOME")]),_v(" directory of the user "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("chan-jd")]),_v(".")]),_v(" "),_c('li',[_v("If wrapped within quotation marks, it becomes a literal "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("~")]),_v(" char in the file path. Thus, to use both together,\nthe tilde has to be left out of the quotation marks: "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("~/\"some test file\"")]),_v(".")]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("~")]),_v(" does not work in Windows command prompt but does work in Windows PowerShell")])])]),_v(" "),_c('li',[_v("Windows has various methods to apply the current directory to a path\n"),_c('ul',[_c('li',[_v("If a file path starts with a single component separator like "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("\\utilities")]),_v(" and the current directory is "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("C:\\temp")]),_v(" then normalization produces "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("C:\\utilities")])]),_v(" "),_c('li',[_v("If it starts with a drive without component separator like "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("D:sources")]),_v(", it looks for the most recent directory accessed on "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("D:\\")]),_v(". If it is "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("D:\\temp")]),_v(" then the normalization produces "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("D:\\temp\\sources")]),_v(".")]),_v(" "),_c('li',[_v("Otherwise, a path like "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("example\\path")]),_v(" will be prepended with the current directory on normalization.")])])])]),_v(" "),_c('h3',{attrs:{"id":"special-characters-in-bash-string-arguments"}},[_c('span',{staticClass:"anchor",attrs:{"id":"special-characters-in-bash-string-arguments"}}),_v("Special Characters in Bash String Arguments"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#special-characters-in-bash-string-arguments","onclick":"event.stopPropagation()"}})]),_v(" "),_c('ul',[_c('li',[_v("Double quoting an argument will still allow for special characters like "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("$")]),_v(" (variable substitution) to work.\n"),_c('ul',[_c('li',[_c('a',{attrs:{"href":"https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html#Double-Quotes"}},[_v("Reference manual link")])])])]),_v(" "),_c('li',[_v("Single quoting preserves the literal value of every single character within the quotes. Another single quote will end the quotation and there is no way to escape it.\n"),_c('ul',[_c('li',[_c('a',{attrs:{"href":"https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html#Single-Quotes"}},[_v("Reference manual link")])]),_v(" "),_c('li',[_v("This "),_c('a',{attrs:{"href":"https://stackoverflow.com/questions/1250079/how-to-escape-single-quotes-within-single-quoted-strings"}},[_v("stackoverflow post")]),_v(" suggests a good way to handle quoting arguments containing both single quotes and special characters.\n"),_c('ul',[_c('li',[_v("Wrap all characters besides single quotes in "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("'")]),_v(".")]),_v(" "),_c('li',[_v("For "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("'")]),_v(", replace it with "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("'\"'\"'")]),_v(". Consecutive quoted strings not separated by spaces are treated as a single argument in Bash. This quotes the single quote in double quotes where it does not have special meaning.")])])])])]),_v(" "),_c('li',[_v("A (possibly incomplete) list of special characters in Bash that need to be escaped can be found in this "),_c('a',{attrs:{"href":"https://unix.stackexchange.com/questions/347332/what-characters-need-to-be-escaped-in-files-without-quotes"}},[_v("stackexchange post")]),_v(".")]),_v(" "),_c('li',[_c('em',[_v("Relevant note")]),_v(": On Windows CMD, the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("'")]),_v(" single quote has no special meaning and cannot be used to quote arguments in CMD. Only double quotes works for arguments containing spaces to be treated as a single argument.")])]),_v(" "),_c('h3',{attrs:{"id":"variable-and-tilde-expansion-in-cmd-and-bash"}},[_c('span',{staticClass:"anchor",attrs:{"id":"variable-and-tilde-expansion-in-cmd-and-bash"}}),_v("Variable and tilde expansion in CMD and Bash"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#variable-and-tilde-expansion-in-cmd-and-bash","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("When we run something like "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("java -jar RepoSense.jar some cli args")]),_v(", variable expansion and tilde expansion (for Bash) is performed for us before the Java program receives it.")]),_v(" "),_c('ul',[_c('li',[_v("E.g. If I specify my repository as "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("~/reposense/Reposense")]),_v(", the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("main")]),_v(" method in the Java program will receive the String "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("/chan-jd/home/reposense/Reposense")]),_v(" in its "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("args")]),_v(" array.")]),_v(" "),_c('li',[_v("This behaviour is mostly beneficial for us but can cause some non-uniform program behaviour when user has more than one way to specify their arguments. An example relevant to RepoSense is that users can specify their local repository file paths in both the command line or the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("repo-config.csv")]),_v(" file.\nBut when RepoSense reads the data straight from the CSV file, it does not perform the necessary expansions. Using the example above, "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("RepoSense")]),_v(" will receive the raw version of the String, "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("~/reposense/Reposense")]),_v(" instead which might cause some issues.")]),_v(" "),_c('li',[_v("One possible way to work around this is to "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("echo")]),_v(" the command in CMD or Bash. The command output will include the substituted expansions.")])]),_v(" "),_c('h2',{attrs:{"id":"github"}},[_c('span',{staticClass:"anchor",attrs:{"id":"github"}}),_v("GitHub"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#github","onclick":"event.stopPropagation()"}})]),_v(" "),_c('h3',{attrs:{"id":"deployments-and-environments"}},[_c('span',{staticClass:"anchor",attrs:{"id":"deployments-and-environments"}}),_v("Deployments and Environments"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#deployments-and-environments","onclick":"event.stopPropagation()"}})]),_v(" "),_c('ul',[_c('li',[_c('a',{attrs:{"href":"https://docs.github.com/en/rest/reference/deployments#environments"}},[_v("Environments")]),_v(" can be viewed as the platform for which deployments are staged. There are generally fewer of them. For example in RepoSense, there is roughly two environments per active pull request for deployments.\n"),_c('ul',[_c('li',[_v("Environments can be viewed on the main page of a repository.")]),_v(" "),_c('li',[_v("They will linger so long as the deployment on the environment continues to exist and would normally require manual deletion.")])])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"https://docs.github.com/en/rest/reference/deployments"}},[_v("Deployments")]),_v(" are requests to deploy a specific version of the repo such as a pending pull request. In the context of RepoSense, a single PR can have several tens of deployments if it is consistently updated.\n"),_c('ul',[_c('li',[_v("It is generally difficult to track and control deployments on the GitHub page itself.")]),_v(" "),_c('li',[_v("However, through the GitHub API, we can query all deployments relating to an environment and delete them. This will automatically remove the environment from the listing as well. This solution was taken from this "),_c('a',{attrs:{"href":"https://stackoverflow.com/a/61272173"}},[_v("stackoverflow post")]),_v(".")])])])]),_v(" "),_c('h3',{attrs:{"id":"github-api"}},[_c('span',{staticClass:"anchor",attrs:{"id":"github-api"}}),_v("GitHub API"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#github-api","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("The GitHub API provides us with a way to interact with repositories via a RESTful API. Using "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("curl")]),_v(" commands:")]),_v(" "),_c('ul',[_c('li',[_v("We are able to query (via "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("GET")]),_v(") for information such as branches, deployments and environments")]),_v(" "),_c('li',[_v("We are also able to "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("POST")]),_v(" commands to a repository to perform various actions such as deleting deployments. These generally require a security token which might not be available from a personal computer's CLI. When running GitHub Actions, it is possible to acquire one for the repository to perform actions such as closing deployments.")])]),_v(" "),_c('h3',{attrs:{"id":"github-actions"}},[_c('span',{staticClass:"anchor",attrs:{"id":"github-actions"}}),_v("GitHub Actions"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#github-actions","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("We must add GitHub action workflow files to the directory "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(".github/workflows")]),_v(" in order to automatically perform certain scripts on certain GitHub actions.")]),_v(" "),_c('ul',[_c('li',[_v("The general workflow of a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(".yml")]),_v(" workflow file contains a declaration "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("on")]),_v(" which states under what scenarios will these actions be triggered\n"),_c('ul',[_c('li',[_v("It is followed by a list of jobs. For each job, we can declare a name, platform to run on, environment variables, followed by sequential steps to perform.")]),_v(" "),_c('li',[_v("Under steps, we can use "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("run")]),_v(" to run shell scripts similar to running the same command from a BASH terminal")])])]),_v(" "),_c('li',[_v("When setting up an environment to perform a specific workflow, we can generally choose exactly what OS to run, what versions of Java or other languages/packages to use.\n"),_c('ul',[_c('li',[_v("It is additionally helpful to be aware of what are the versions used by default for the various OS-es.\n"),_c('ul',[_c('li',[_c('a',{attrs:{"href":"https://github.com/actions/virtual-environments/blob/c253e7f4d192e492988596167a1d461e99698c13/images/linux/Ubuntu2004-README.md"}},[_v("Ubuntu 20.04")]),_v(" - here we can see the default Git used is 2.30.2. It might be helpful to be aware of such specifications as we might experience differing behavior in the future due to version differences.")])])]),_v(" "),_c('li',[_v("Related to RepoSense, and caused me quite a bit of trouble is that GitHub Actions uses the default timezone of UTC+00.00 which leads to some commits being assigned to the previous day as compared to if it were run locally on my own machine which is at UTC+8.")])])])]),_v(" "),_c('h2',{attrs:{"id":"git-specifications"}},[_c('span',{staticClass:"anchor",attrs:{"id":"git-specifications"}}),_v("Git Specifications:"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#git-specifications","onclick":"event.stopPropagation()"}})]),_v(" "),_c('h3',{attrs:{"id":"git-diff-output"}},[_c('span',{staticClass:"anchor",attrs:{"id":"git-diff-output"}}),_v("Git Diff Output"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#git-diff-output","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git diff")]),_v(" command is used heavily by RepoSense for analyzing. The following are behaviour in the output that I discovered from self-testing as documentation about the behaviour was difficult to find:")]),_v(" "),_c('ul',[_c('li',[_c('p',[_v("The filename "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("/dev/null")]),_v(" represents a non-existent file. A mapping from "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("/dev/null")]),_v(" to a file indicates a new file.\nSimilarly, a mapping from a file to "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("/dev/null")]),_v(" indicates a deleted file.")])]),_v(" "),_c('li',[_c('p',[_v("For filenames containing certain special characters (i.e. the lines "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("--- a/some/file/name")]),_v(" or "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("+++ b/some/file/name")]),_v("), the listing of filenames in the before-after comparison is adjusted slightly.")]),_v(" "),_c('ul',[_c('li',[_v("For files containing spaces, the filename will have a tab character at the end. E.g. "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("+++ b/space test\\t")]),_v(".")]),_v(" "),_c('li',[_v("For files containing special characters (not including space) such as \\, "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("\"")]),_v(", "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("\\t")]),_v(", the filename will be placed in quotation marks. E.g. "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("+++ \"b/tab\\\\ttest/\"")])]),_v(" "),_c('li',[_v("For files containing both of the above cases, the filename is first wrapped in double quotation marks followed by a tab character.")])])]),_v(" "),_c('li',[_c('p',[_v("These nuances in "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git diff")]),_v(" filename output may be important for filename designation as is done in RepoSense.")])])]),_v(" "),_c('h3',{attrs:{"id":"git-log-output"}},[_c('span',{staticClass:"anchor",attrs:{"id":"git-log-output"}}),_v("Git Log Output"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#git-log-output","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("Every commit in the log output displays the hash, author with email, date and message.")]),_v(" "),_c('ul',[_c('li',[_v("If a user has set an email in their "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git config")]),_v(" but set their Github 'keep my email address private' setting to true, web-based Git operations will list their email as "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("username@users.noreply.github.com")]),_v(".")]),_v(" "),_c('li',[_v("It is possible to explicitly set the email to be empty through "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git config --global user.email \\<\\>")]),_v(" which will set it to "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("<>")]),_v(". No email will show up in a commit done by such a user config.")])]),_v(" "),_c('h3',{attrs:{"id":"git-commit-and-amp-config-interaction"}},[_c('span',{staticClass:"anchor",attrs:{"id":"git-commit-and-amp-config-interaction"}}),_v("Git Commit & Config Interaction"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#git-commit-and-amp-config-interaction","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git commit")]),_v(" commit information details can be found "),_c('a',{attrs:{"href":"https://git-scm.com/docs/git-commit#_commit_information"}},[_v("here")]),_v(".")]),_v(" "),_c('ul',[_c('li',[_v("When committing with a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("user.name")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("user.email")]),_v(" that matches a GitHub account, commits on GitHub will be able to link the GitHub account to the commit.\n"),_c('ul',[_c('li',[_v("However, committing with an empty email "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("<>")]),_v(" will cause the commit to look like "),_c('a',{attrs:{"href":"https://github.com/reposense/testrepo-Alpha/commit/2536b8e0de3366989f4b124b9a5a613db010379e"}},[_v("this on GitHub")]),_v(" where there is no account linked to it.")])])]),_v(" "),_c('li',[_v("It is possible temporarily set "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("user.name")]),_v(" as "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("<>")]),_v(". However, it will not allow the user to commit, citing an invalid username.\n"),_c('ul',[_c('li',[_v("It is also possible to set "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("user.name")]),_v(" as an empty string which is equivalent to resetting it. Git will not allow commits until a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("user.name")]),_v(" has been set.")])])])]),_v(" "),_c('h3',{attrs:{"id":"git-changelogs"}},[_c('span',{staticClass:"anchor",attrs:{"id":"git-changelogs"}}),_v("Git Changelogs"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#git-changelogs","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("This section refers specifically to the changes to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Git")]),_v(" tool itself. I have found out from my own experience that finding information relating to "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Git")]),_v(" versions can be difficult as most search results relate to how "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Git")]),_v(" can be used to manage those versions.")]),_v(" "),_c('ul',[_c('li',[_v("The release notes can be found at "),_c('a',{attrs:{"href":"https://github.com/git/git/tree/master/Documentation/RelNotes"}},[_v("https://github.com/git/git/tree/master/Documentation/RelNotes")])]),_v(" "),_c('li',[_v("One (rather inefficient) way I have found to attempt to search for relevant information regarding when a specific change was made was to do the following:\n"),_c('ol',[_c('li',[_v("Clone the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git")]),_v(" repository locally (Note the repository is quite large)")]),_v(" "),_c('li',[_v("Create a bash script that takes in a string from the command line and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("grep")]),_v("-es it against all the text files in the folder "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Documentation/RelNotes")])])]),_v(" "),_c('ul',[_c('li',[_v("Queries are generally quite fast. For example, if I wanted to find out when the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git blame --ignore-revs-file")]),_v(" flag was added, I could search for "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git blame")]),_v(" and see all relevant release notes and look them up manually.")]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("grep")]),_v(" can be set to quiet mode if I'm just looking for the file containing the reference. Otherwise, in non-quiet mode, the line in which the string match is found is printed. I can read the line and see if it is directly related to what I am looking for without having to look-up the file myself.")])])]),_v(" "),_c('li',[_v("Descriptions of the changes can be somewhat vague. It is usually easier to look for the specific command and see if it showed up in the specific release notes rather than trying to find keywords relating to the change in mind.\n"),_c('ul',[_c('li',[_v("For example the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("ignore-revs-list")]),_v(" flag addition was done in 2.23.0. The release notes reads "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("\"git blame\" learned to \"ignore\" commits in the history, ...")]),_v(".")]),_v(" "),_c('li',[_v("For full details on the change, we need to go to the commit message itself. The commit messages are extremely detailed, e.g. "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git blame --ignore-revs-file")]),_v(" commit can be found "),_c('a',{attrs:{"href":"https://github.com/git/git/commit/ae3f36dea16e51041c56ba9ed6b38380c8421816"}},[_v("here")]),_v(".")])])])]),_v(" "),_c('h2',{attrs:{"id":"javascript-vue-js"}},[_c('span',{staticClass:"anchor",attrs:{"id":"javascript-vue-js"}}),_v("Javascript/Vue.js"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#javascript-vue-js","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("New language for me, no prior experience. Learnt how to read and interpret most of the lines of Javascript in RepoSense.")]),_v(" "),_c('ul',[_c('li',[_v("Javascript has "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Object")]),_v("s which are a container of key-value pairs listing its properties, and some pre-defined methods.\n"),_c('ul',[_c('li',[_v("Can perform operations on "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Object")]),_v("s similar to what can be done to a map. Use "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Object.entries(object)")]),_v(" to enumerate the key-value pairs.")]),_v(" "),_c('li',[_v("The properties of an object can be created, edited and accessed from anywhere more similar to languages like Python's OOP")])])]),_v(" "),_c('li',[_v("Javascript uses "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("(args...) => output")]),_v(" to write lambda functions as opposed to "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("(args...) -> output")]),_v(" for Java.")]),_v(" "),_c('li',[_v("Javascript has something known as object destructuring where we can extract the properties of an object.\n"),_c('ul',[_c('li',[_v("Given something like "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("author = {name: JD, repo: RepoSense}")]),_v(", then doing "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("const {name, repo} = author")]),_v(" would allow us to access the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("name")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("repo")]),_v(" as local variables.")])])])]),_v(" "),_c('p',[_v("Interacting with objects on a webpage:")]),_v(" "),_c('ul',[_c('li',[_v("Each click on an interactive component on the webpage fires off a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("clickEvent")]),_v(".\n"),_c('ul',[_c('li',[_v("In Vue, we can tag listener methods to a specific event a component might encounter.")]),_v(" "),_c('li',[_v("The event itself also contains details about the circumstances in which it was triggered such as other buttons that were pressed while the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("clickEvent")]),_v(" was created.")]),_v(" "),_c('li',[_v("The default behaviour for clicking on an anchor link object is to open the hyperlink reference. This can be prevented with a listener that does "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("event.preventDefault()")]),_v(".")])])])]),_v(" "),_c('h2',{attrs:{"id":"html"}},[_c('span',{staticClass:"anchor",attrs:{"id":"html"}}),_v("HTML"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#html","onclick":"event.stopPropagation()"}})]),_v(" "),_c('ul',[_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("href")]),_v(" attribute of an anchor object provides the hyperlink reference to whichever URL page the anchor object is supposed to open.\n"),_c('ul',[_c('li',[_v("Notably, if "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("href")]),_v(" is not set and left as "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("undefined")]),_v(", then a link will not be opened even if "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("target")]),_v(" is set.")])])]),_v(" "),_c('li',[_v("In conjunction with the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("href")]),_v(" property, there is the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("target")]),_v(" property which designates where the hyperlink will be opened.\n"),_c('ul',[_c('li',[_v("Most commonly used in RepoSense is "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("target=\"_blank\"")]),_v(" which means to open a new window or tab.")]),_v(" "),_c('li',[_v("There are other alternatives such as "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("_self")]),_v(" for opening in the same frame, "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("_parent")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("_top")]),_v(".")])])])]),_v(" "),_c('h2',{attrs:{"id":"regular-expressions"}},[_c('span',{staticClass:"anchor",attrs:{"id":"regular-expressions"}}),_v("Regular Expressions"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#regular-expressions","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("Java provides extensive support for Regex matching via the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Pattern")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Matcher")]),_v(" classes which facilitate string parsing.")]),_v(" "),_c('ul',[_c('li',[_c('a',{attrs:{"href":"https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html"}},[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Pattern")])]),_v(" is Java's class for handling various regex pattern.\n"),_c('ul',[_c('li',[_v("The API provides a list of all the recognised syntax. In particular, I would like to go over the different quantifier types as I believe they are quite important for anyone who wants to build complex regex patterns.")]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Greedy quantifiers")]),_v(" - what we see the most often: "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("x?")]),_v(", "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("x*")]),_v(", "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("x+")]),_v(".\n"),_c('ul',[_c('li',[_v("These will always try to be met if possible. They take precedence over "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Reluctant quantifiers")]),_v(".")])])]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Reluctant quantifiers")]),_v(" - e.g. "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("x??")]),_v(", "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("x*?")]),_v(", "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("x+?")]),_v(".\n"),_c('ul',[_c('li',[_v("These matched only if it is required for the regex to fully match.")]),_v(" "),_c('li',[_v("For example, matching "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("(?<greedy>.*)(?<reluctant>.*)")]),_v(" on the string "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Example word")]),_v(" will result in "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("greedy = Example word")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("reluctant = \"\"")]),_v(";")])])]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Possessive quantifiers")]),_v(" - e.g. "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("x?+")]),_v(", "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("x*+")]),_v(", "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("x++")]),_v(".\n"),_c('ul',[_c('li',[_v("When Java does the matching from left to right, these quantifiers will be matched first. Once Java reaches the end of the line, it actually does backtracking to see if some greedy/reluctant quantifiers can give up some characters for the regex to match.")]),_v(" "),_c('li',[_v("However, possessive quantifiers will never give up their characters on backtrack even if it means that the matcher would otherwise have matched.")]),_v(" "),_c('li',[_v("Possessive quantifiers should be used carefully. However, their behaviour is more straightforward and easy to understand.")])])])])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"https://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html"}},[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Matcher")])]),_v(" "),_c('ul',[_c('li',[_v("We can perform "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Pattern p = ...; p.matcher(\"some String\")")]),_v(" to obtain a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Matcher")]),_v(" object. Most of the information that we want can be obtained from this object.")]),_v(" "),_c('li',[_v("However, there are some points to be noted about the implementation of the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Matcher")]),_v(" object in Java.\n"),_c('ul',[_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Matcher")]),_v(" objects (for Java 8 and 11) are initially just a mutable container containing the regex and the String. Matching logic has not yet been performed.")]),_v(" "),_c('li',[_v("Suppose we have named groups within our regex pattern. We have to run a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("matches")]),_v(" or "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("find")]),_v(" method at least once for the object to mutate and support group queries.\n"),_c('ul',[_c('li',[_v("Calling a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Matcher::group")]),_v(" directly without first calling "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("matches")]),_v(" or "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("find")]),_v(" leads to an "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("IllegalStateException")]),_v(" as the object never attempted to match anything yet.")])])])])])])])]),_v(" "),_c('p',[_v("Regex testing can be particularly cumbersome, slow and difficult to grasp why the regex is behaving the way it is. I personally found this website "),_c('a',{attrs:{"href":"https://regex101.com/"}},[_v("regex101")]),_v(" which allows convenient testing of various regex patterns on different inputs. It also supports regex testing for different languages.")]),_v(" "),_c('h2',{attrs:{"id":"gson-package"}},[_c('span',{staticClass:"anchor",attrs:{"id":"gson-package"}}),_v("GSON package"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#gson-package","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("Gson (also known as Google Gson) is an open-source Java library to serialize and deserialize Java objects to (and from) JSON. (Taken from Wikipedia's description)")]),_v(" "),_c('ul',[_c('li',[_v("I used this "),_c('a',{attrs:{"href":"https://www.baeldung.com/gson-json-to-map"}},[_v("baeldung.com guide")]),_v(" to learn about converting JSON objects into HashMaps. They also have various other articles describing other features like deserialization to greater depth. Their API can also be easily found online. This is their "),_c('a',{attrs:{"href":"https://javadoc.io/doc/com.google.code.gson/gson/latest/index.html"}},[_v("2.9.0 API")]),_v(".")]),_v(" "),_c('li',[_v("From my experience, the general way in which GSON reads a JSON file is to read it into a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("JsonElement")]),_v(" abstract class with four different types, a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("JsonArray")]),_v(", "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("JsonNull")]),_v(", "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("JsonObject")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("JsonPrimitive")]),_v(".\n"),_c('ul',[_c('li',[_v("Most of the types listed above are very similar to their Java counterparts. The one that stands out is the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("JsonObject")]),_v(" which is more similar to the Javascript object as it is a collection of name-value pairs where each name is a string and each value is another "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("JsonElement")]),_v(".")])])]),_v(" "),_c('li',[_v("In order to read JSON files into more exotic objects that we might have previously defined, we can either use a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("TypeToken")]),_v(" for the GSON "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("JsonParser")]),_v(" or implement our own "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("JsonDeserializer")]),_v(" for each class we want to be read from a JSON file.\n"),_c('ul',[_c('li',[_v("One naive way of parsing a JSON file into a Map is to do "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Map map = new Gson().fromJson(JSON_FILE, Map.class);")]),_v(". However, this immediately runs into the problem where the map class itself is using raw types.\n"),_c('ul',[_c('li',[_c('p',[_v("To avoid this, we can use a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("TypeToken")]),_v(". By creating a new type as such")]),_v(" "),_c('pre',[_c('code',{pre:true},[_v("Type mapType = new TypeToken<Map<String, Commit>>() {}.getType();\nMap<String, Commit> map = new Gson().fromJson(JSON_FILE, mapType);\n")])]),_v(" "),_c('p',[_v("We are able to preserve the generics class types used.")])])])])])])]),_v(" "),_c('h2',{attrs:{"id":"others"}},[_c('span',{staticClass:"anchor",attrs:{"id":"others"}}),_v("Others"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#others","onclick":"event.stopPropagation()"}})]),_v(" "),_c('h3',{attrs:{"id":"and-quot-file-and-quot-uri-scheme"}},[_c('span',{staticClass:"anchor",attrs:{"id":"and-quot-file-and-quot-uri-scheme"}}),_v("\"file\" URI Scheme"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#and-quot-file-and-quot-uri-scheme","onclick":"event.stopPropagation()"}})]),_v(" "),_c('ul',[_c('li',[_v("Specification can be found here "),_c('a',{attrs:{"href":"https://datatracker.ietf.org/doc/html/rfc8089"}},[_v("RFC8089")]),_v(".\n"),_c('ul',[_c('li',[_v("A file URL looks like "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("file://host.example.com/path/to/file")]),_v(".\n"),_c('ul',[_c('li',[_v("Double slashes following the colon "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("://")]),_v(" indicates that the file is not local and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("host.example.com")]),_v(" is the 'authority' which hosts the file")]),_v(" "),_c('li',[_v("Single slash or triple slashes after the colon "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(":/")]),_v(" or "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(":///")]),_v(" will both be treated as a local file. Everything after the last slash forms the path to the file.")])])])])])]),_v(" "),_c('h3',{attrs:{"id":"curl-command"}},[_c('span',{staticClass:"anchor",attrs:{"id":"curl-command"}}),_v("cURL command"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#curl-command","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("cURL is a command-line tool to transfer data to or from a server using support protocols. In particular, GitHub Actions shows many examples of RESTful API calls using the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("curl")]),_v(" command.")]),_v(" "),_c('h3',{attrs:{"id":"restful-api"}},[_c('span',{staticClass:"anchor",attrs:{"id":"restful-api"}}),_v("RESTful API"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#restful-api","onclick":"event.stopPropagation()"}})]),_v(" "),_c('ul',[_c('li',[_v("REST stands for "),_c('em',[_v("Representational state transfer")]),_v(". It is an architectural style for an API that uses HTTP requests to access and use data. (description taken from "),_c('a',{attrs:{"href":"https://www.techtarget.com/searchapparchitecture/definition/RESTful-API"}},[_v("here")]),_v(").")]),_v(" "),_c('li',[_v("GitHub has its own RESTful API where we can make queries to repositories and possibly post commands to a repo provided we have proper access rights. The return type for queries is normally in the JSON format.")])]),_v(" "),_c('h3',{attrs:{"id":"bash-shell-scripting"}},[_c('span',{staticClass:"anchor",attrs:{"id":"bash-shell-scripting"}}),_v("Bash Shell Scripting"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#bash-shell-scripting","onclick":"event.stopPropagation()"}})]),_v(" "),_c('ul',[_c('li',[_v("Can use "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(".sh")]),_v(" files to write shell scripts that can be run in Linux environments")]),_v(" "),_c('li',[_v("Can specify functions as "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("function_name() { ... }")]),_v(" "),_c('ul',[_c('li',[_v("Functional arguments can be referenced from within the function declaration block with "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("${1}")]),_v(" referring to the first argument, "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("${2}")]),_v(" referring to the second argument, etc.")]),_v(" "),_c('li',[_v("These functional arguments can be specified by a user via "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("function_name \"$argument1\" \"$argument2\"")])]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("$@")]),_v(" can also be used to refer to all of the shell script's CLI arguments. It can be iterated through like an array.")])])])]),_v(" "),_c('h3',{attrs:{"id":"other-popular-remote-repository-hosts"}},[_c('span',{staticClass:"anchor",attrs:{"id":"other-popular-remote-repository-hosts"}}),_v("Other popular remote repository hosts"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#other-popular-remote-repository-hosts","onclick":"event.stopPropagation()"}})]),_v(" "),_c('ul',[_c('li',[_v("Any remote site that allows access to a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(".git")]),_v(" directory is capable of hosting a remote repository")]),_v(" "),_c('li',[_v("Popular remote repository domains besides GitHub include sites like GitLab and BitBucket\n"),_c('ul',[_c('li',[_v("Interacting with these are nearly identical to interacting with GitHub, with "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("https")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("ssh")]),_v(" options to clone a repository.")]),_v(" "),_c('li',[_v("Relevant to RepoSense: the paths to commits and other features are usually different between the sites. For RepoSense to support all these websites, it'll have to take into account the differences in the path to these resources on the website.")])])])]),_v(" "),_c('h3',{attrs:{"id":"intellij-inspect-code"}},[_c('span',{staticClass:"anchor",attrs:{"id":"intellij-inspect-code"}}),_v("IntelliJ Inspect Code"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#intellij-inspect-code","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("The Inspect Code tool allows IntelliJ to look for common code quality issues such as")]),_v(" "),_c('ul',[_c('li',[_v("Declaration redundancy")]),_v(" "),_c('li',[_v("Probable bugs")]),_v(" "),_c('li',[_v("Proofreading")])]),_v(" "),_c('p',[_v("Limitations:")]),_v(" "),_c('ul',[_c('li',[_v("A full run of the code cleanup takes a long time to complete. A run on RepoSense itself takes ~10 minutes.\nThis can be cut significantly shorter if we ignore the proofreading checks which cuts it down to 30 seconds.")]),_v(" "),_c('li',[_v("'Unused' (as declared by IntelliJ) fields might not be redundant such as in "),_c('a',{attrs:{"href":"https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/report/SummaryJson.java"}},[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("SummaryJson.java")])]),_v(" where the fields are necessary for conversion to a JSON file.")]),_v(" "),_c('li',[_v("'Unused' methods are sometimes necessary for other tools such as JavaBeans (requires setters and getters) and JavaFX (@FXML methods are not detected as 'used')")])]),_v(" "),_c('p',[_v("Thus, we should still exercise discretion in using this tool even if it is something as simple as removing unused variables or methods.")]),_v(" "),_c('h3',{attrs:{"id":"file-locks"}},[_c('span',{staticClass:"anchor",attrs:{"id":"file-locks"}}),_v("File locks"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#file-locks","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("When Java opens a file for writing, it obtains a file lock in the form of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("filename.extension.lck")]),_v(" with "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("lck")]),_v(" standing for lock.\nThis serves to support mutual exclusion for access to writing to the file. This appears in RepoSense when loggers attempt to write to the log file in which case, some kind of mutual exclusion gurantee is required.")]),_v(" "),_c('ul',[_c('li',[_v("Notably, file locks (and other process resources) are released automatically when the main Java process "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("exits()")]),_v(".\n"),_c('ul',[_c('li',[_v("However, in some scenarios, releasing the lock only at the end of the entire process might be too late. One example I encountered is that when running "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("gradlew")]),_v(" system tests, the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("log")]),_v(" file lock is held on to for the entire duration of the run over multiple system tests. This causes issues with running consecutive system tests as I am unable to delete the previous system test's report due to the lingering file lock.")])])]),_v(" "),_c('li',[_v("In some scenarios when the program does not exit properly, the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(".lck")]),_v(" file might be left behind.\n"),_c('ul',[_c('li',[_v("An example execution that results in this is running RepoSense via "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("gradlew")]),_v(" command line with the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("-v")]),_v(" command. After "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("ctrl+C")]),_v(" to close the server, the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(".lck")]),_v(" file persists even though it should have been cleaned up. For some reason, running "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("gradlew")]),_v(" on Ubuntu 18.04 does not have the same issue.\n"),_c('ul',[_c('li',[_v("However, this seems to be mostly harmless as it does not affect anything else.")])])])])]),_v(" "),_c('li',[_v("Suggested by this "),_c('a',{attrs:{"href":"https://stackoverflow.com/questions/12849138/close-log-files/22957009#22957009"}},[_v("stackoverflow post")]),_v(", one way to easily release all log resources at the end of Java execution is to use "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("LogManager.getLogManager().reset()")]),_v(" which immediately releases all resources.")])]),_v(" "),_c('h3',{attrs:{"id":"checkstyle"}},[_c('span',{staticClass:"anchor",attrs:{"id":"checkstyle"}}),_v("Checkstyle"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#checkstyle","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("Their GitHub repository can be found "),_c('a',{attrs:{"href":"https://github.com/checkstyle/checkstyle"}},[_v("here")]),_v(" where we can view the features they are working on and bugs that other people are experiencing.")]),_v(" "),_c('ul',[_c('li',[_v("In particular, there is a rather strange bug relating to "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("forceStrictCondition")]),_v(" which is not able to properly detect parent lines of nested line wrapppings.\n"),_c('ul',[_c('li',[_v("The relevant issues can be found in "),_c('a',{attrs:{"href":"https://github.com/checkstyle/checkstyle/issues/6024"}},[_v("Issue #6024")]),_v(" and "),_c('a',{attrs:{"href":"https://github.com/checkstyle/checkstyle/issues/6020"}},[_v("Issue #6020")])])])]),_v(" "),_c('li',[_v("The above issues result in some somewhat strange enforcements, for example (taken from #6024), the code below has violations though it is what we expect the indentations to be")])]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("Arrays.asList(true,\n")]),_c('span',[_v("        Arrays.asList(true,\n")]),_c('span',[_v("                true, //violation\n")]),_c('span',[_v("                true));  //violation\n")])])]),_c('ul',[_c('li',[_v("While the same line of code below is what passes the checkstyle but has unusual indentation.")])]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("Arrays.asList(true,\n")]),_c('span',[_v("        Arrays.asList(true,\n")]),_c('span',[_v("        true, // no violation, but should be\n")]),_c('span',[_v("        true));  // no violation, but should be\n")])])]),_c('ul',[_c('li',[_v("There appears to be quite a distinct tradeoff here as without "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("forceStrictCondition")]),_v(", checkstyle only enforces the minimum required indentation level. A user's indentation can be as large as they desire so long as it does not exceed the line character limit.\n"),_c('ul',[_c('li',[_v("However, if we were to "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("forceStrictCondition")]),_v(", then for nested line wrappings, the indentation being enforced can be somewhat strange.")])])])]),_v(" "),_c('i',{staticClass:"fa fa-arrow-circle-up fa-lg d-print-none",attrs:{"id":"scroll-top-button","onclick":"handleScrollTop()","aria-hidden":"true"}})])}
},function anonymous(
) {
with(this){return _c('footer',[_c('div',{staticClass:"text-center"},[_c('p',[_v("["),_c('strong',[_v("This site was generated using "),_c('img',{attrs:{"src":"https://markbind.org/favicon.ico","width":"25"}}),_v(" "),_c('a',{attrs:{"href":"https://markbind.org/"}},[_v("MarkBind 4.1.0")])]),_v(" on Tue, May 2, 2023, 2:23:27 PM UTC]"),_c('br'),_v(" "),_c('span',{staticClass:"dimmed"},[_c('small',[_c('small',[_v("favicon.ico of this site was made by "),_c('a',{attrs:{"href":"https://www.flaticon.com/authors/smashicons","title":"Smashicons"}},[_v("Smashicons")]),_v(" from "),_c('a',{attrs:{"href":"https://www.flaticon.com/","title":"Flaticon"}},[_v("www.flaticon.com")]),_v(" is licensed by "),_c('a',{attrs:{"href":"http://creativecommons.org/licenses/by/3.0/","title":"Creative Commons BY 3.0","target":"_blank"}},[_v("CC 3.0 BY")])])])])])])])}
}];
  