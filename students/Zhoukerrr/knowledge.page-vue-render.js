
    var pageVueRenderFn = function anonymous(
) {
with(this){return _c('div',{attrs:{"id":"app"}},[_c('header',{attrs:{"fixed":""}},[_c('navbar',{attrs:{"placement":"top","type":"primary"},scopedSlots:_u([{key:"brand",fn:function(){return [_c('a',{staticClass:"navbar-brand",attrs:{"href":"/2023/index.html","title":"Home"}},[_v("CS3281&2-2023/Students")])]},proxy:true},{key:"right",fn:function(){return [_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"https://github.com/nus-cs3281/2023"}},[_c('span',[_c('span',{staticClass:"fab fa-github",attrs:{"aria-hidden":"true"}})])])])]},proxy:true}])},[_v(" "),_c('dropdown',{staticClass:"nav-link",scopedSlots:_u([{key:"header",fn:function(){return [_v("CS3281")]},proxy:true}])},[_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/2023/index.html"}},[_v("Students")])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/2023/students/knowledge.html"}},[_v("Knowledge")])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"https://nus-cs3281.github.io/2023-dashboard/?search=&sort=groupTitle&sortWithin=title&timeframe=commit&mergegroup=&groupSelect=groupByAuthors&breakdown=false"}},[_v("Code Dashboard")])])]),_v(" "),_c('dropdown',{staticClass:"nav-link",scopedSlots:_u([{key:"header",fn:function(){return [_v("CS3282")]},proxy:true}])},[_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/2023/cs3282-index.html"}},[_v("Students")])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/2023/students/talksSchedule.html"}},[_v("Lightning Talks")])])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/2023/instructions.html"}},[_v("Instructions")])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"https://nus-cs3281.github.io/website/"}},[_v("CS3281&2 Website "),_c('span',[_c('span',{staticClass:"glyphicon glyphicon-share-alt",attrs:{"aria-hidden":"true"}})])])])],1)],1),_v(" "),_c('div',{attrs:{"id":"flex-body"}},[_m(0),_v(" "),_c('overlay-source',{staticClass:"fixed-header-padding",attrs:{"id":"page-nav","tag-name":"nav","to":"page-nav"}},[_c('div',{staticClass:"nav-component slim-scroll"})])],1),_v(" "),_m(1)])}
};
    var pageVueStaticRenderFns = [function anonymous(
) {
with(this){return _c('div',{staticClass:"fixed-header-padding",attrs:{"id":"content-wrapper"}},[_c('h3',{attrs:{"id":"cypress"}},[_c('span',{staticClass:"anchor",attrs:{"id":"cypress"}}),_v("Cypress"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#cypress","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("Cypress is a tool for testing anything that run in a web browser. It is fast and easy to use. It allows the user to write reliable tests. Cypress can cover unit tests, integration tests as well as end-to-end test. Cypress also records down all the states during test for easy debugging.")]),_v(" "),_c('p',[_v("I learned how to set up a new Cypress test, fetch the target value and add assertions by using the "),_c('a',{attrs:{"href":"https://docs.cypress.io/guides/getting-started/writing-your-first-test"}},[_v("Official Cypress Documentation")]),_v(". This was used in of one the PRs when I modify some frontend behaviours.")]),_v(" "),_c('p',[_v("I also learned about the best pratices as well as some common anti-patterns when writing Cypress tests. One issue was raised over the use of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("wait()")]),_v(" most of our Cypress tests. This is actually an anti-pattern as described in the guide. In short, the previous command will not resolve until a response is received (or timeout in a negative case). Therefore, there is no need to explicitly wait. The use of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("wait()")]),_v(" in the context only slows the the test unnecessarily. After removing the use of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("wait()")]),_v(", the local test speed was reduced from an average of 135 seconds to 60 seconds, which is quite a significant improvement. For more details, please visit "),_c('a',{attrs:{"href":"https://docs.cypress.io/guides/references/best-practices"}},[_v("Cypress Best Practice")]),_v(".")]),_v(" "),_c('h3',{attrs:{"id":"migration-from-vue-2-to-vue-3"}},[_c('span',{staticClass:"anchor",attrs:{"id":"migration-from-vue-2-to-vue-3"}}),_v("Migration from Vue 2 to Vue 3"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#migration-from-vue-2-to-vue-3","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("RepoSense uses Vue for frontend. The current Vue version used is Vue 2. Vue 3 was a major upgrade introduced in September 2020. It is a major revamp from Vue 2. It is faster, lighter and introduce better TypeScript support. Migrating to Vue 3 is inevitable from a long term perspective. However, with such a major upgrade, many of the exisiting sytanx are no longer supported/changed. This bring a lot of issue during migration. The "),_c('a',{attrs:{"href":"https://v3.vuejs.org/guide/migration/introduction.html#breaking-changes"}},[_v("Vue 3 Guide")]),_v(" summarises the breaking changes.")]),_v(" "),_c('p',[_v("The migration process is also long and tedious. The "),_c('a',{attrs:{"href":"https://v3.vuejs.org/guide/migration/migration-build.html#overview"}},[_v("Official Vue Migration Build")]),_v(" provides a clear path to upgrade. This is also the one that I am currently using to work on the migration.")]),_v(" "),_c('h3',{attrs:{"id":"vue-v-if-and-v-for"}},[_c('span',{staticClass:"anchor",attrs:{"id":"vue-v-if-and-v-for"}}),_v("(Vue) "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("v-if")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("v-for")]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#vue-v-if-and-v-for","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("In Vue 2, when using "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("v-if")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("v-for")]),_v(" on the same element, "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("v-for")]),_v(" would take precedence. In Vue 3, "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("v-if")]),_v(" will always have the higher precedence than "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("v-for")]),_v(". In the migration guide, it is stated that:")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("It is recommended to avoid using both on the same element due to the syntax ambiguity.\n")]),_c('span',[_v("\n")]),_c('span',[_v("Rather than managing this at the template level, one method for accomplishing this is to create a computed property that filters out a list for the visible elements.\n")])])]),_c('p',[_v("This makes a lot of sense. When we mix if and for together, we might end up confusing ourselevs and introduce bugs that are diffifcult to catch. When we operate on a filtered list, there is no ambiguity is the code. Not only does this help us to avoid bugs, it also makes the code easier to read and easier for someone else to understand.")]),_v(" "),_c('h3',{attrs:{"id":"vue-v-if-vs-v-show"}},[_c('span',{staticClass:"anchor",attrs:{"id":"vue-v-if-vs-v-show"}}),_v("(Vue) "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("v-if")]),_v(" vs "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("v-show")]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#vue-v-if-vs-v-show","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("v-if")]),_v(" is a “real” conditional rendering as it is created/destroyed when the condition is true/false. "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("v-if")]),_v(" is also lazy in the sense that the condition within the conditional block will only be rendered until the condition is true.")]),_v(" "),_c('p',[_v("On the other hand, "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("v-show")]),_v(" always renders the element regardless of the initial condition. The visibility is controlled by the css.")]),_v(" "),_c('p',[_v("In general, "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("v-if")]),_v(" has higher toggle cost because it needs to render the element when the condition is true. However, it can be used to save some initial loading time if it is false initially. "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("v-show")]),_v(" might incur higher initial reader costs because everything is rendered on loading, but the toggling cost is very little. The general advice is that if you need to toggle the element very often, use "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("v-show")]),_v(". Use "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("v-if")]),_v(" if the condition is unlikely to change during runtime.")]),_v(" "),_c('h3',{attrs:{"id":"vue-watchers"}},[_c('span',{staticClass:"anchor",attrs:{"id":"vue-watchers"}}),_v("(Vue) Watchers"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#vue-watchers","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("Computed properties allow us to compute derived values declaratively. However, sometimes the values changes due to side effects of the program. Watchers allow us to trigger a function whenever a property changes.")]),_v(" "),_c('p',[_v("We often use watcher on an array property. In Vue 2, the watcher is triggered whenever something within the array changes. However, this is not the default setting in Vue 3. In Vue 3, the watcher will only be shallow. Meaning that it will only be triggered when the watcher property has been assigned a new value. Any inner value changes will not trigger the watcher to fire. This is likely due to performance optimisation. To enable watcher action on all nested mutation, we need to use a deep watcher. The following code snippet is an example.")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("watch: {\n")]),_c('span',[_v("    someObject: {\n")]),_c('span',[_v("        handler(newValue, oldValue) {\n")]),_c('span',[_v("            // action to take\n")]),_c('span',[_v("        },\n")]),_c('span',[_v("        deep: true // Needed in Vue 3 for mutation of nested values\n")]),_c('span',[_v("    }\n")]),_c('span',[_v("}\n")])])]),_c('h3',{attrs:{"id":"checking-plugin-github-issue-page"}},[_c('span',{staticClass:"anchor",attrs:{"id":"checking-plugin-github-issue-page"}}),_v("Checking Plugin GitHub Issue Page"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#checking-plugin-github-issue-page","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("When dealing with a plugin (debugging/upgrading), we sometimes face some unexplained behaviours. I spent hours debugging and searching for decumentation only to realise that it is a bug of the plugin. Always check the issue page of the plugin when in doubt, especially when it comes to compatibility issues after upgrading the plugin or other plugins.")]),_v(" "),_c('h3',{attrs:{"id":"opening-issues"}},[_c('span',{staticClass:"anchor",attrs:{"id":"opening-issues"}}),_v("Opening Issues"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#opening-issues","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("When opening an issue, we should make the problem clear. We should explicitly state the difference and the expected behaviour so that anyone can understand the issue clearly. An unclear issue may lead to misunderstanding and lead to hours wasted on an unrelated work.")]),_v(" "),_c('h3',{attrs:{"id":"working-with-json-files"}},[_c('span',{staticClass:"anchor",attrs:{"id":"working-with-json-files"}}),_v("Working with JSON files"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#working-with-json-files","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("Never put any comments in "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(".json")]),_v(" files. Comments of the form "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("//...")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("/*...*/")]),_v(" are not allowed. Some IDEs do not flag out this as an error and such files might be able to be used normally. However, when error arises due to this issue, it is extremely difficult to find the error as the error message often do not point to the incorrect files.")]),_v(" "),_c('h3',{attrs:{"id":"class-style-component-syntax"}},[_c('span',{staticClass:"anchor",attrs:{"id":"class-style-component-syntax"}}),_v("Class-style component syntax"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#class-style-component-syntax","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("I came across this term during the integration of Typescript to our project. In Vue, this means that the syntax will be "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("export default class Counter extends Vue")]),_v(". This is an alternative to the normal style we use. Some of the advantages includes the ability to utilize some ECMAScript language features such as class inheritance and decorators. For more details, please refer to "),_c('a',{attrs:{"href":"https://class-component.vuejs.org"}},[_v("here")]),_v(".")]),_v(" "),_c('h3',{attrs:{"id":"the-use-of-a-utility-class"}},[_c('span',{staticClass:"anchor",attrs:{"id":"the-use-of-a-utility-class"}}),_v("The use of a utility class"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#the-use-of-a-utility-class","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("Some functions are used by many parts of the project. We might find it tempting to put everything in a utility class and make it accessible to everyone. However, this increases coupling and makes future debugs/updates extremely difficult. We should examine the consumers of the functions and group them in a sensible way. In stead of having a huge utility class, we can split it into smaller ones with clear responsibilities. This way we apply separation of concerns and we might not need to make the class global.")]),_v(" "),_c('h3',{attrs:{"id":"some-useful-typescript-syntax"}},[_c('span',{staticClass:"anchor",attrs:{"id":"some-useful-typescript-syntax"}}),_v("Some useful typescript syntax"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#some-useful-typescript-syntax","onclick":"event.stopPropagation()"}})]),_v(" "),_c('ul',[_c('li',[_v("Optionals can be represented as "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("?")]),_v(". For example, "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("age?: number")]),_v(" is equivalent to "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("age: number | undefined")]),_v(" but it is much simpler to read and write.")]),_v(" "),_c('li',[_v("Arrays can be represented as "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Array<T>")]),_v(" or "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("T[]")]),_v(". I personally think that it is better to use the latter as it allows us to define an array of any complex objects.")]),_v(" "),_c('li',[_v("We can define our own type if it is used commonly. The "),_c('a',{attrs:{"href":"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#interfaces"}},[_v("syntax")]),_v(" is straightforward. However, take note of the "),_c('a',{attrs:{"href":"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces"}},[_v("Differences Between Type Aliases and Interfaces")]),_v(".")])]),_v(" "),_c('i',{staticClass:"fa fa-arrow-circle-up fa-lg d-print-none",attrs:{"id":"scroll-top-button","onclick":"handleScrollTop()","aria-hidden":"true"}})])}
},function anonymous(
) {
with(this){return _c('footer',[_c('div',{staticClass:"text-center"},[_c('p',[_v("["),_c('strong',[_v("This site was generated using "),_c('img',{attrs:{"src":"https://markbind.org/favicon.ico","width":"25"}}),_v(" "),_c('a',{attrs:{"href":"https://markbind.org/"}},[_v("MarkBind 4.1.0")])]),_v(" on Tue, May 2, 2023, 2:23:27 PM UTC]"),_c('br'),_v(" "),_c('span',{staticClass:"dimmed"},[_c('small',[_c('small',[_v("favicon.ico of this site was made by "),_c('a',{attrs:{"href":"https://www.flaticon.com/authors/smashicons","title":"Smashicons"}},[_v("Smashicons")]),_v(" from "),_c('a',{attrs:{"href":"https://www.flaticon.com/","title":"Flaticon"}},[_v("www.flaticon.com")]),_v(" is licensed by "),_c('a',{attrs:{"href":"http://creativecommons.org/licenses/by/3.0/","title":"Creative Commons BY 3.0","target":"_blank"}},[_v("CC 3.0 BY")])])])])])])])}
}];
  