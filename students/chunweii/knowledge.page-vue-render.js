
    var pageVueRenderFn = function anonymous(
) {
with(this){return _c('div',{attrs:{"id":"app"}},[_c('header',{attrs:{"fixed":""}},[_c('navbar',{attrs:{"placement":"top","type":"primary"},scopedSlots:_u([{key:"brand",fn:function(){return [_c('a',{staticClass:"navbar-brand",attrs:{"href":"/2023/index.html","title":"Home"}},[_v("CS3281&2-2023/Students")])]},proxy:true},{key:"right",fn:function(){return [_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"https://github.com/nus-cs3281/2023"}},[_c('span',[_c('span',{staticClass:"fab fa-github",attrs:{"aria-hidden":"true"}})])])])]},proxy:true}])},[_v(" "),_c('dropdown',{staticClass:"nav-link",scopedSlots:_u([{key:"header",fn:function(){return [_v("CS3281")]},proxy:true}])},[_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/2023/index.html"}},[_v("Students")])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/2023/students/knowledge.html"}},[_v("Knowledge")])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"https://nus-cs3281.github.io/2023-dashboard/?search=&sort=groupTitle&sortWithin=title&timeframe=commit&mergegroup=&groupSelect=groupByAuthors&breakdown=false"}},[_v("Code Dashboard")])])]),_v(" "),_c('dropdown',{staticClass:"nav-link",scopedSlots:_u([{key:"header",fn:function(){return [_v("CS3282")]},proxy:true}])},[_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/2023/cs3282-index.html"}},[_v("Students")])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/2023/students/talksSchedule.html"}},[_v("Lightning Talks")])])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/2023/instructions.html"}},[_v("Instructions")])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"https://nus-cs3281.github.io/website/"}},[_v("CS3281&2 Website "),_c('span',[_c('span',{staticClass:"glyphicon glyphicon-share-alt",attrs:{"aria-hidden":"true"}})])])])],1)],1),_v(" "),_c('div',{attrs:{"id":"flex-body"}},[_c('div',{staticClass:"fixed-header-padding",attrs:{"id":"content-wrapper"}},[_m(0),_v(" "),_c('p',[_v("In CS2103/T, I learnt about the Observer design pattern but I did not really see it being used often until I had to work with rxjs in Angular.")]),_v(" "),_c('p',[_v("Observables are used in Angular to provide a form of lazy transfer of data to the observer in both a synchronous and asynchronous manner, in a beautiful functional programming style. For example, if we want to get API data of the authenticated user from github, we can call")]),_v(" "),_m(1),_m(2),_v(" "),_m(3),_m(4),_v(" "),_m(5),_v(" "),_m(6),_v(" "),_m(7),_v(" "),_m(8),_v(" "),_c('p',[_v("Suppose you want to create an Angular component which contains a child component that needs to be styled. The best way is to apply the CSS styles to the child itself. But sometimes, it is not possible or just too tedious. For example, in this CATcher PR, I want to apply markdown-like CSS styles to a custom generated HTML code. To do this, I have to put the HTML inside an article tag, set the class of the article to \"markdown-body\", and let the css file handle the styling. However, the CSS styles did not get applied to the generated HTML. Why?")]),_v(" "),_c('p',[_v("To solve this issue, we will have to learn about view encapsulation in Angular. There are currently 3 types of view encapsulation in Angular: ShadowDom, Emulated (default) and None. The table below summarizes the different view encapsulation modes.")]),_v(" "),_m(9),_m(10),_v(" "),_m(11),_v(" "),_m(12),_v(" "),_m(13),_v(" "),_c('p',[_v("In CATcher, we need to perform authentication to ensure that users who log in are "),_c('tooltip',{scopedSlots:_u([{key:"content",fn:function(){return [_v("Users are actually who they claim to be")]},proxy:true}])},[_v("authentic")]),_v(". Authorization is also needed to ensure that only the relevant students, tutors and admins can log in to CATcher. To achieve this, CATcher uses Github OAuth to authenticate and authorize users.")],1),_v(" "),_c('p',[_v("OAuth is an open-standard protocol for authorization. By using Github OAuth, the user first authenticates himself by logging into his own Github account. Then, Github will ask the user for permission to allow CATcher to access certain content and perform certain actions. By accepting the permission request, Github will authorize CATcher to act on the user's behalf, for example, to create a new issue during PE. Here are the details behind the OAuth process when a user tries to log into CATcher:")]),_v(" "),_m(14),_v(" "),_c('p',[_v("Thanks to OAuth, users can grant third-party applications permissions to access, modify or delete content on another account. CATcher benefits from this because users do not need to use the Github interface directly to do their PE.")]),_v(" "),_c('p',[_v("However, the access token must be securely kept, since anyone who has the access token can perform actions on behalf of CATcher.")]),_v(" "),_m(15),_v(" "),_c('i',{staticClass:"fa fa-arrow-circle-up fa-lg d-print-none",attrs:{"id":"scroll-top-button","onclick":"handleScrollTop()","aria-hidden":"true"}})]),_v(" "),_c('overlay-source',{staticClass:"fixed-header-padding",attrs:{"id":"page-nav","tag-name":"nav","to":"page-nav"}},[_c('div',{staticClass:"nav-component slim-scroll"})])],1),_v(" "),_m(16)])}
};
    var pageVueStaticRenderFns = [function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"observer-design-pattern-in-rxjs"}},[_c('span',{staticClass:"anchor",attrs:{"id":"observer-design-pattern-in-rxjs"}}),_v("Observer design pattern (in rxjs)"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#observer-design-pattern-in-rxjs","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs typescript"}},[_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("const")]),_v(" observable = "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("from")]),_v("(octokit.users.getAuthenticated()).pipe(\n")]),_c('span',[_v("    map("),_c('span',{pre:true,attrs:{"class":"hljs-function"}},[_v("("),_c('span',{pre:true,attrs:{"class":"hljs-params"}},[_v("response")]),_v(") =>")]),_v(" response["),_c('span',{pre:true,attrs:{"class":"hljs-string"}},[_v("'data'")]),_v("]),\n")]),_c('span',[_v("    catchError("),_c('span',{pre:true,attrs:{"class":"hljs-function"}},[_v("("),_c('span',{pre:true,attrs:{"class":"hljs-params"}},[_v("err")]),_v(") =>")]),_v(" throwError("),_c('span',{pre:true,attrs:{"class":"hljs-string"}},[_v("'Failed to fetch authenticated user.'")]),_v("))\n")]),_c('span',[_v(");\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("from(...)")]),_v(" will convert the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Promise")]),_v(" object "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("octokit.users.getAuthenticated()")]),_v(" into an observable. We can then change the values returned by this promise by using "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("pipe(...)")]),_v(". In the example, the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("map(...)")]),_v(" function in the pipe will only retrieve the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("'data'")]),_v(" values of the response from the API call. Afterwards, we can subscribe to the observable somewhere else by calling "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("subscribe(...)")]),_v(". In the example below, we will subscribe to the observable and print the data to the console.")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs typescript"}},[_c('span',[_v("observable.subscribe("),_c('span',{pre:true,attrs:{"class":"hljs-function"}},[_v("("),_c('span',{pre:true,attrs:{"class":"hljs-params"}},[_v("data")]),_v(") =>")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-built_in"}},[_v("console")]),_v(".log(data));\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("rxjs provides a wide range of transformation operators (such as map) that will make programming with lazy data (like asynchronous API calls) easier. For more information, visit "),_c('a',{attrs:{"href":"https://rxjs.dev/guide/overview"}},[_v("https://rxjs.dev/guide/overview")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"logging"}},[_c('span',{staticClass:"anchor",attrs:{"id":"logging"}}),_v("Logging"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#logging","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_v("Though it might seem to be redundant at first, log messages are helpful to developers when users report a bug that cannot be resolved easily. In CATcher, logging is used at various levels, from logging error messages to logging network HTTP requests to the github server. The octokit API library that is used to perform API requests to the Github server allows developers to customize the various logging levels, so that there is no need to manually hard-code the logging messages for every method that has a Github API call. By separating the various logging levels, developers can easily filter through the less important messages if there is a critical error. There are usually 4 levels of logging for the console (other than the general "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("console.log")]),_v("), shown below in increasing severity:")])}
},function anonymous(
) {
with(this){return _c('ol',[_c('li',[_c('strong',[_v("debug")]),_v(": Provides useful information to the developer in development mode. Usually debug messages are not very useful in production, especially for CATcher, since they take up a lot of space in the log. An example of a debug message can be the HTTP request details of an API call to Github.")]),_v(" "),_c('li',[_c('strong',[_v("info")]),_v(": Provides information about a less important event occuring or a state change. Such information is not very important to the developers, but in certain situations, the developer may find such messages helpful.")]),_v(" "),_c('li',[_c('strong',[_v("warn")]),_v(": Provides an important warning to the developer if there is an unexpected situation or bad code, but the application can continue to work. Developers should take note of such warnings and address these warnings if possible.")]),_v(" "),_c('li',[_c('strong',[_v("error")]),_v(": Provides an important error message to the developer if one or more components of the application fails and stop functioning properly. This usually constitutes as a bug that developers should work on promptly.")])])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"view-encapsulation"}},[_c('span',{staticClass:"anchor",attrs:{"id":"view-encapsulation"}}),_v("View Encapsulation"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#view-encapsulation","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('div',{staticClass:"table-responsive"},[_c('table',{staticClass:"markbind-table table table-bordered table-striped"},[_c('thead',[_c('tr',[_c('th',[_v("View Encapsulation")]),_v(" "),_c('th',[_v("Description")])])]),_v(" "),_c('tbody',[_c('tr',[_c('td',[_v("ShadowDOM")]),_v(" "),_c('td',[_v("In Angular, ShadowDOM uses the browsers's internal Shadow DOM API to encapsulate/hide the Angular component's view inside a ShadowRoot and applies the styles specified only to the component itself. See "),_c('a',{attrs:{"href":"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM"}},[_v("mdn docs")]),_v(" for more details on what is ShadowDOM. The drawback of this is that some browsers may not support ShadowDOM (but major browsers like Chrome and Firefox support ShadowDOM).")])]),_v(" "),_c('tr',[_c('td',[_v("Emulated")]),_v(" "),_c('td',[_v("This is the default view encapsulation in Angular. It emulated the behaviour of ShadowDOM, without using ShadowDOM. Angular does this by adding unique attributes to the component templates and edits the css by applying the attributes too. See the picture below for an example.")])]),_v(" "),_c('tr',[_c('td',[_v("None")]),_v(" "),_c('td',[_v("Perhaps the easiest to understand. Unlike ShadowDOM and Emulated, the HTML and CSS is untouched. However, this can cause the CSS to be applied to the entire webpage. We try to avoid using this if possible, in case of styling conflicts.")])])])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("Example of emulated view encapsulation:\n"),_c('a',{attrs:{"href":"/2023/students/chunweii/Emulated_encapsulation_component.png","target":"_self"}},[_c('img',{staticClass:"img-fluid",attrs:{"src":"/2023/students/chunweii/Emulated_encapsulation_component.png","alt":"Component"}})]),_v(" "),_c('a',{attrs:{"href":"/2023/students/chunweii/Emulated_encapsulation_style.png","target":"_self"}},[_c('img',{staticClass:"img-fluid",attrs:{"src":"/2023/students/chunweii/Emulated_encapsulation_style.png","alt":"Style"}})])])}
},function anonymous(
) {
with(this){return _c('p',[_v("Notice that there is a special "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("_ngcontent-ctx-c23")]),_v(" attribute applied to the elements within "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("app-issue")]),_v(" component, while the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("app-issue")]),_v(" element itself acts as a \"shadow host\", hence the attribute "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("_nghost-ctx-c23")]),_v(". However, the content of the child component "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("app-issue-title")]),_v(" will not have this attribute. In the bottom picture, we see that Angular has changed our CSS styles such that it will only be applied to elements with attributes such as "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("_ngcontent-ctx-c23")]),_v(". This prevents the style from being applied throughout the web page, hence emulating the behaviour of ShadowDOM.")])}
},function anonymous(
) {
with(this){return _c('p',[_v("Going back to the initial question, why were the styles not applied to the generated HTML? This is because we were using the default emulated view encapsulation, so the imported CSS file will be edited to include the unique attribute "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("_ngcontent-ctx-cXX")]),_v(". The generated HTML however, does not have this attribute. Therefore, we will need to set the view encapsulation to None, so that we can apply the markdown-like CSS styles to the generated HTML.")])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"authentication-and-authorization"}},[_c('span',{staticClass:"anchor",attrs:{"id":"authentication-and-authorization"}}),_v("Authentication and authorization"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#authentication-and-authorization","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('ol',[_c('li',[_v("User selects a session and logs in.")]),_v(" "),_c('li',[_v("CATcher will redirect the user to Github to log in, and specify the scope of permissions needed for CATcher.")]),_v(" "),_c('li',[_v("The user is redirected back to CATcher. Github will send an authorization code to CATcher.")]),_v(" "),_c('li',[_v("CATcher will request for an access token from Github. However, it has to do so through a backend server (gatekeeper).")]),_v(" "),_c('li',[_v("The browser receives the access token from Github via gatekeeper. This access token will be used to authenticate future Github API requests made by the user.")])])}
},function anonymous(
) {
with(this){return _c('p',[_v("More resources here: "),_c('a',{attrs:{"href":"https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps#web-application-flow"}},[_v("Github OAuth guide")]),_v(", "),_c('a',{attrs:{"href":"https://datatracker.ietf.org/doc/html/rfc6749"}},[_v("IETF RFC6749 document")])])}
},function anonymous(
) {
with(this){return _c('footer',[_c('div',{staticClass:"text-center"},[_c('p',[_v("["),_c('strong',[_v("This site was generated using "),_c('img',{attrs:{"src":"https://markbind.org/favicon.ico","width":"25"}}),_v(" "),_c('a',{attrs:{"href":"https://markbind.org/"}},[_v("MarkBind 4.1.0")])]),_v(" on Tue, May 2, 2023, 2:23:27 PM UTC]"),_c('br'),_v(" "),_c('span',{staticClass:"dimmed"},[_c('small',[_c('small',[_v("favicon.ico of this site was made by "),_c('a',{attrs:{"href":"https://www.flaticon.com/authors/smashicons","title":"Smashicons"}},[_v("Smashicons")]),_v(" from "),_c('a',{attrs:{"href":"https://www.flaticon.com/","title":"Flaticon"}},[_v("www.flaticon.com")]),_v(" is licensed by "),_c('a',{attrs:{"href":"http://creativecommons.org/licenses/by/3.0/","title":"Creative Commons BY 3.0","target":"_blank"}},[_v("CC 3.0 BY")])])])])])])])}
}];
  