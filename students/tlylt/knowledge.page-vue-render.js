
    var pageVueRenderFn = function anonymous(
) {
with(this){return _c('div',{attrs:{"id":"app"}},[_c('header',{attrs:{"fixed":""}},[_c('navbar',{attrs:{"placement":"top","type":"primary"},scopedSlots:_u([{key:"brand",fn:function(){return [_c('a',{staticClass:"navbar-brand",attrs:{"href":"/2023/index.html","title":"Home"}},[_v("CS3281&2-2023/Students")])]},proxy:true},{key:"right",fn:function(){return [_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"https://github.com/nus-cs3281/2023"}},[_c('span',[_c('span',{staticClass:"fab fa-github",attrs:{"aria-hidden":"true"}})])])])]},proxy:true}])},[_v(" "),_c('dropdown',{staticClass:"nav-link",scopedSlots:_u([{key:"header",fn:function(){return [_v("CS3281")]},proxy:true}])},[_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/2023/index.html"}},[_v("Students")])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/2023/students/knowledge.html"}},[_v("Knowledge")])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"https://nus-cs3281.github.io/2023-dashboard/?search=&sort=groupTitle&sortWithin=title&timeframe=commit&mergegroup=&groupSelect=groupByAuthors&breakdown=false"}},[_v("Code Dashboard")])])]),_v(" "),_c('dropdown',{staticClass:"nav-link",scopedSlots:_u([{key:"header",fn:function(){return [_v("CS3282")]},proxy:true}])},[_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/2023/cs3282-index.html"}},[_v("Students")])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/2023/students/talksSchedule.html"}},[_v("Lightning Talks")])])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/2023/instructions.html"}},[_v("Instructions")])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"https://nus-cs3281.github.io/website/"}},[_v("CS3281&2 Website "),_c('span',[_c('span',{staticClass:"glyphicon glyphicon-share-alt",attrs:{"aria-hidden":"true"}})])])])],1)],1),_v(" "),_c('div',{attrs:{"id":"flex-body"}},[_c('div',{staticClass:"fixed-header-padding",attrs:{"id":"content-wrapper"}},[_c('panel',{attrs:{"type":"seamless","peek":"","panelId":"creating-and-amp-publishing-a-npm-package"},scopedSlots:_u([{key:"header",fn:function(){return [_c('h3',{attrs:{"id":"creating-and-amp-publishing-a-npm-package"}},[_c('span',{staticClass:"anchor",attrs:{"id":"creating-and-amp-publishing-a-npm-package"}}),_v("Creating & Publishing a NPM package"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#creating-and-amp-publishing-a-npm-package","onclick":"event.stopPropagation()"}})])]},proxy:true}])},[_v("\nWhile I use packages from NPM all the time, working on MarkBind has motivated me to create and publish a NPM package from start to finish.\nI chose to create a plugin for Markdown-it, a Markdown parser that is used by MarkBind in the process of converting Markdown to HTML. In \nthe process of creating the plugin, I followed a tutorial by Kent C. Dodds and explored a few development tools such as \n- mocha and chai for testing, \n- semantic-release and commitizen for releasing the package, \n- Babel for transpiling the code, \n- Github Actions for automating the update.\n"),_c('p',[_v("Resources")]),_v(" "),_c('ul',[_c('li',[_c('a',{attrs:{"href":"https://egghead.io/courses/how-to-write-an-open-source-javascript-library"}},[_v("How to Write an Open Source JavaScript Library")])])])]),_v(" "),_c('panel',{attrs:{"type":"seamless","peek":"","panelId":"regular-expression"},scopedSlots:_u([{key:"header",fn:function(){return [_c('h3',{attrs:{"id":"regular-expression"}},[_c('span',{staticClass:"anchor",attrs:{"id":"regular-expression"}}),_v("Regular Expression"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#regular-expression","onclick":"event.stopPropagation()"}})])]},proxy:true}])},[_v("\nRegular expressions are a powerful way to match patterns in text. In JavaScript, basic checks to find out whether a string is\na substring can be done via the `includes` method. However, this approach may not be robust when we want to specify an exact\nmatch.\n"),_c('p',[_v("For example:")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs javascript"}},[_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("const")]),_v(" existingClass = node.attribs.class;\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("if")]),_v(" (existingClass\n")]),_c('span',[_v("    && (existingClass.includes("),_c('span',{pre:true,attrs:{"class":"hljs-string"}},[_v("'line-numbers'")]),_v(") || existingClass.includes("),_c('span',{pre:true,attrs:{"class":"hljs-string"}},[_v("'no-line-numbers'")]),_v("))) {\n")]),_c('span',[_v("        "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("return")]),_v(";\n")]),_c('span',[_v("    }\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("// ...")]),_v("\n")])])]),_c('p',[_v("in the above piece of code, the intention was to detect whether the class attribute of a HTML node contains the string 'line-numbers' or\n'no-line-numbers'. However, the use of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("includes")]),_v(" will wrongly match 'line-numbers-1' or 'foo-line-numbers'.")]),_v(" "),_c('p',[_v("To match the exact pattern (for example just the word 'line-numbers'), we can use regular expressions.")]),_v(" "),_c('p',[_v("In total, there are 4 cases that we need to handle:")]),_v(" "),_c('ul',[_c('li',[_v("'line-numbers' is at the start of the class attribute")]),_v(" "),_c('li',[_v("'line-numbers' is in the middle of the class attribute")]),_v(" "),_c('li',[_v("'line-numbers' is at the end of the class attribute")]),_v(" "),_c('li',[_v("'line-numbers' is the only word in the class attribute")])]),_v(" "),_c('p',[_v("Thus to match it with regular expressions, we can use the following pattern:")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs javascript"}},[_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("const")]),_v(" existingClass = node.attribs.class || "),_c('span',{pre:true,attrs:{"class":"hljs-string"}},[_v("''")]),_v(";\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("const")]),_v(" regex = "),_c('span',{pre:true,attrs:{"class":"hljs-regexp"}},[_v("/^line-numbers\\s|\\sline-numbers\\s|\\sline-numbers$|^line-numbers$/")]),_v(";\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("if")]),_v(" (regex.test(existingClass)) {\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("return")]),_v(";\n")]),_c('span',[_v("}\n")])])]),_c('p',[_v("This can be simplified by using the alternate operator "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("|")]),_v(":")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs javascript"}},[_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("const")]),_v(" regex = "),_c('span',{pre:true,attrs:{"class":"hljs-regexp"}},[_v("/(^|\\s)line-numbers($|\\s)/")]),_v(";\n")])])]),_c('p',[_v("To handle both 'line-numbers' and 'no-line-numbers', we can use the following pattern:")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs javascript"}},[_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("const")]),_v(" regex = "),_c('span',{pre:true,attrs:{"class":"hljs-regexp"}},[_v("/(^|\\s)(no-)?line-numbers($|\\s)/")]),_v(";\n")])])]),_c('p',[_v("Lastly, in cases where we just want to know the existence of a pattern, we can use JavaScript's "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("test")]),_v(" method instead of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("match")]),_v(" for better performance.")]),_v(" "),_c('p',[_v("Resources")]),_v(" "),_c('ul',[_c('li',[_c('a',{attrs:{"href":"https://regex101.com/"}},[_v("Onlilne Regex tool")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"https://github.com/MarkBind/markbind/pull/1734"}},[_v("Discussions around the examples above in MarkBind #1734 PR review")])])])]),_v(" "),_c('panel',{attrs:{"type":"seamless","peek":"","panelId":"devops-and-amp-ci"},scopedSlots:_u([{key:"header",fn:function(){return [_c('h3',{attrs:{"id":"devops-and-amp-ci"}},[_c('span',{staticClass:"anchor",attrs:{"id":"devops-and-amp-ci"}}),_v("Devops & CI"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#devops-and-amp-ci","onclick":"event.stopPropagation()"}})])]},proxy:true}])},[_v(" "),_c('h4',{attrs:{"id":"npm-i-vs-npm-ci"}},[_c('span',{staticClass:"anchor",attrs:{"id":"npm-i-vs-npm-ci"}}),_v("npm i vs npm ci"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#npm-i-vs-npm-ci","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("The two commands are both used to install dependencies from the npm registry. However, to keep the installation process relabilable,\nnpm ci (stands for npm clean install) can be used in CI environments to ensure a fresh installation.")]),_v(" "),_c('ul',[_c('li',[_c('a',{attrs:{"href":"https://docs.npmjs.com/cli/v8/commands/npm-install"}},[_v("npm i")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"https://docs.npmjs.com/cli/v8/commands/npm-ci"}},[_v("npm ci")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"https://stackoverflow.com/questions/52499617/what-is-the-difference-between-npm-install-and-npm-ci"}},[_v("stackoverflow post")])])]),_v(" "),_c('h4',{attrs:{"id":"github-workflow"}},[_c('span',{staticClass:"anchor",attrs:{"id":"github-workflow"}}),_v("GitHub Workflow"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#github-workflow","onclick":"event.stopPropagation()"}})]),_v(" "),_c('h5',{attrs:{"id":"matrix-jobs-and-amp-conditional-steps"}},[_c('span',{staticClass:"anchor",attrs:{"id":"matrix-jobs-and-amp-conditional-steps"}}),_v("Matrix, jobs & conditional Steps"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#matrix-jobs-and-amp-conditional-steps","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("I have summarized what I learned from configuring the CI script in this "),_c('a',{attrs:{"href":"https://dev.to/tlylt/intermediate-github-ci-workflow-walk-through-1j6p"}},[_v("article")]),_v(".\nThe interesting parts are:")]),_v(" "),_c('ul',[_c('li',[_v("How to run tests on various OSes")]),_v(" "),_c('li',[_v("How to run jobs dependent on one another and on certain conditions")]),_v(" "),_c('li',[_v("How to run steps based on certain conditions")])]),_v(" "),_c('h5',{attrs:{"id":"pr-from-forked-repositories"}},[_c('span',{staticClass:"anchor",attrs:{"id":"pr-from-forked-repositories"}}),_v("PR from forked repositories"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#pr-from-forked-repositories","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("While working on creating a PR preivew workflow for MarkBind, I found out that secrets are not available when workflows are being triggered from a fork. This limitation is due to security concerns that malicious users may access the secrets by modifying the original workflow.")]),_v(" "),_c('p',[_v("To still allow certain legitimate use cases, GitHub came up with a separate event called \"PULL_REQUEST_TARGET\" that can be used to trigger a workflow from a fork, with access to the secrets. This is with the restriction that the workflow will only run based on the content of the base branch of the parent repository. With this approach, the code from a fork will not be executed and hence it is relatively safe to run. However, I found an interesting "),_c('a',{attrs:{"href":"https://blog.teddykatz.com/2021/03/17/github-actions-write-access.html"}},[_v("article")]),_v(" that in fact reported (has been fixed) a way to misbehave and exploit this approach. GitHub Security Lab also published a relevant "),_c('a',{attrs:{"href":"https://securitylab.github.com/research/github-actions-preventing-pwn-requests/"}},[_v("article")]),_v(" with regards to working with workflows and forked repositories.")]),_v(" "),_c('p',[_v("A short summary of the recommended approach is:")]),_v(" "),_c('ul',[_c('li',[_c('p',[_v("create two separate workflows")])]),_v(" "),_c('li',[_c('p',[_v("one workflow triggers when PR is sent from any repo. It builds using content from the forked repo and upload the relevant files as artifacts. This workflow should not invovle any secrets.")])]),_v(" "),_c('li',[_c('p',[_v("another workflow triggers when the above workflow has completed. This workflow should download the artifacts and does the work with possible access to secrets.")])]),_v(" "),_c('li',[_c('p',[_c('a',{attrs:{"href":"https://blog.teddykatz.com/2021/03/17/github-actions-write-access.html"}},[_v("Stealing arbitrary GitHub Actions secrets")])])]),_v(" "),_c('li',[_c('p',[_c('a',{attrs:{"href":"https://securitylab.github.com/research/github-actions-preventing-pwn-requests/"}},[_v("Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests")])])]),_v(" "),_c('li',[_c('p',[_c('a',{attrs:{"href":"https://github.blog/2020-08-03-github-actions-improvements-for-fork-and-pull-request-workflows/#improvements-for-public-repository-forks"}},[_v("GitHub Actions improvements for fork and pull request workflows")])])])]),_v(" "),_c('h5',{attrs:{"id":"reusable-workflows"}},[_c('span',{staticClass:"anchor",attrs:{"id":"reusable-workflows"}}),_v("Reusable workflows"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#reusable-workflows","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("To improve the utility of workflows, GitHub introduced "),_c('a',{attrs:{"href":"https://docs.github.com/en/actions/using-workflows/reusing-workflows"}},[_v("reusable workflows")]),_v(". A reusable workflow is a workflow that can be used to trigger other workflows.")]),_v(" "),_c('h4',{attrs:{"id":"pr-preview"}},[_c('span',{staticClass:"anchor",attrs:{"id":"pr-preview"}}),_v("PR Preview"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#pr-preview","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("PR Preview is an useful feature for frontend web development. When someone proposes to merge a PR, the PR preview feature will show the intended changes to the website. This is a great way to check whether the changes are correct or not. There are a few companies that provide generous free services for PR preview, including Netlify. One interesting point that I learned when researching on PR previews is that deploys are usually \"single use\" and there are some mechanisms in place to ensure that they do not show up and affect the SEO of the original website.")]),_v(" "),_c('ul',[_c('li',[_c('a',{attrs:{"href":"https://www.ryanfiller.com/blog/why-my-blog-stopped-using-deploy-previews"}},[_v("Why My Blog Stopped Using Deploy Previews May 31, 2021")])])]),_v(" "),_c('h4',{attrs:{"id":"semantic-versioning"}},[_c('span',{staticClass:"anchor",attrs:{"id":"semantic-versioning"}}),_v("Semantic versioning"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#semantic-versioning","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("Git tags")]),_v(" "),_c('ul',[_c('li',[_v("Lightweight tag just points to a commit\n"),_c('ul',[_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git tag <tagName> [commit]")])]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git show <tagName>")])])])]),_v(" "),_c('li',[_v("Annotated tags\n"),_c('ul',[_c('li',[_v("Full object in git database")]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git tag -a <tagName> -m\"<annotation>\" [commit]")])])])])]),_v(" "),_c('p',[_v("Semantic versioning")]),_v(" "),_c('ul',[_c('li',[_v("Major version\n"),_c('ul',[_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("1.0.0")])])])]),_v(" "),_c('li',[_v("Minor version\n"),_c('ul',[_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("1.1.0")])])])]),_v(" "),_c('li',[_v("Patch version\n"),_c('ul',[_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("1.1.1")])])])])]),_v(" "),_c('p',[_v("Annotated tags + semantic versioning = Semantic Releases")]),_v(" "),_c('p',[_v("Typical steps for a release:")]),_v(" "),_c('ol',[_c('li',[_v("Create a annotated tag")]),_v(" "),_c('li',[_v("Push tag to remote repository")]),_v(" "),_c('li',[_v("Deployment")]),_v(" "),_c('li',[_v("Release Notes")])]),_v(" "),_c('ul',[_c('li',[_c('a',{attrs:{"href":"https://semver.org/"}},[_v("Semantic Version")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"https://www.youtube.com/watch?v=4wPjo5C-v8Y"}},[_v("Manage releases with Semantic Versioning and Git Tags")])])])]),_v(" "),_c('panel',{attrs:{"type":"seamless","peek":"","panelId":"git-and-amp-github"},scopedSlots:_u([{key:"header",fn:function(){return [_c('h3',{attrs:{"id":"git-and-amp-github"}},[_c('span',{staticClass:"anchor",attrs:{"id":"git-and-amp-github"}}),_v("Git & GitHub"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#git-and-amp-github","onclick":"event.stopPropagation()"}})])]},proxy:true}])},[_v(" "),_c('h4',{attrs:{"id":"git"}},[_c('span',{staticClass:"anchor",attrs:{"id":"git"}}),_v("Git"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#git","onclick":"event.stopPropagation()"}})]),_v(" "),_c('h5',{attrs:{"id":"context"}},[_c('span',{staticClass:"anchor",attrs:{"id":"context"}}),_v("Context"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#context","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("In a feature branch, I updated the .gitignore to ignore some generated build files. When I wanted to switch over to the master branch and start work on another feature, the build files showed up because the master branch's .gitignore has not been updated yet. I was unsure how to create a new branch from master and work on a new feature, without the build files showing up as unstaged changes. The branch that contains the build files cannot be merged yet because the feature is still undergoing review.")]),_v(" "),_c('p',[_v("This prompted me to post my first "),_c('a',{attrs:{"href":"https://stackoverflow.com/questions/71316258/how-to-deal-with-files-ignored-in-a-feature-branch-but-showed-up-when-switched-t"}},[_v("stackoverflow question")]),_v(":")]),_v(" "),_c('blockquote',[_c('p',[_v("How to deal with files ignored in a feature branch but showed up when switched to the master branch?")])]),_v(" "),_c('p',[_v("Thanks to the developer community, I was able to get the following solution that I can use.")]),_v(" "),_c('blockquote',[_c('p',[_v("just repeat the same changes to the .gitignore file on another branch, but leave it as a pending change and don't commit it")])])]),_v(" "),_c('panel',{attrs:{"type":"seamless","peek":"","panelId":"html"},scopedSlots:_u([{key:"header",fn:function(){return [_c('h3',{attrs:{"id":"html"}},[_c('span',{staticClass:"anchor",attrs:{"id":"html"}}),_v("HTML"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#html","onclick":"event.stopPropagation()"}})])]},proxy:true}])},[_v(" "),_c('p',[_v("Deprecation, in a technical sense, is the discouragement from using an old feature.\nIn HTML, there are many elements that get deprecated over time to improve the language. The main reason behind it is a separation of concerns.\nThe introduction of external stylesheets (CSS) means HTML has evolved to focus on content, and not on style.")]),_v(" "),_c('p',[_v("Some reasons for deprecation of certain elements that I gathered from the reference article are:")]),_v(" "),_c('ul',[_c('li',[_v("Avoiding duplication")]),_v(" "),_c('li',[_v("Ease of management")]),_v(" "),_c('li',[_v("Readability")]),_v(" "),_c('li',[_v("Caching")]),_v(" "),_c('li',[_v("Developer specialization")]),_v(" "),_c('li',[_v("User options")]),_v(" "),_c('li',[_v("Responsiveness and device independence")])]),_v(" "),_c('p',[_v("In fact, some of the above reasons might also be applicable to other long-lasting software projects.\nOne interesting thing about decrecation is that it is definitely not easy to ask people to make changes.\nSometimes it takes forever for developers to migrate their code over, perhaps because of the mantra that \"if it works, it works\".\nEven when deciding on what features to decrecate, it could be a difficult argument to make. One unexpected thing that I discovered about HTML element deprecation is that althought the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("<big>")]),_v(" tag is now deprecated, the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("<small>")]),_v(" tag is not. When the use of a feature is so widespread, it is possible to\nderive semantic meaning to save it from deprecation.")]),_v(" "),_c('ul',[_c('li',[_c('a',{attrs:{"href":"https://stackoverflow.com/questions/2260024/why-big-is-not-in-html-5-tag-list-while-small-is"}},[_v("Why <big> is not in HTML 5 Tag list while <small> is?")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"https://css-tricks.com/why-do-some-html-elements-become-deprecated/"}},[_v("Why Do Some HTML Elements Become Deprecated?")])])])]),_v(" "),_c('panel',{attrs:{"type":"seamless","peek":"","panelId":"logging"},scopedSlots:_u([{key:"header",fn:function(){return [_c('h3',{attrs:{"id":"logging"}},[_c('span',{staticClass:"anchor",attrs:{"id":"logging"}}),_v("Logging"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#logging","onclick":"event.stopPropagation()"}})])]},proxy:true}])},[_v(" "),_c('p',[_v("While logging can be trivial, sometimes as simple as a console.log statement, it plays a crucial role in debugging and especially in CLI applications.")]),_v(" "),_c('p',[_v("Some things to consider when logging:")]),_v(" "),_c('ul',[_c('li',[_c('p',[_v("When to log?")])]),_v(" "),_c('li',[_c('p',[_v("At what level of detail?")])]),_v(" "),_c('li',[_c('p',[_v("Log to where? (Console, file, etc.)")])]),_v(" "),_c('li',[_c('p',[_c('a',{attrs:{"href":"https://stackify.com/winston-logging-tutorial/"}},[_v("Winston Logger Ultimate Tutorial: Best Practices, Resources, and Tips")])])])])]),_v(" "),_c('i',{staticClass:"fa fa-arrow-circle-up fa-lg d-print-none",attrs:{"id":"scroll-top-button","onclick":"handleScrollTop()","aria-hidden":"true"}})],1),_v(" "),_c('overlay-source',{staticClass:"fixed-header-padding",attrs:{"id":"page-nav","tag-name":"nav","to":"page-nav"}},[_c('div',{staticClass:"nav-component slim-scroll"})])],1),_v(" "),_m(0)])}
};
    var pageVueStaticRenderFns = [function anonymous(
) {
with(this){return _c('footer',[_c('div',{staticClass:"text-center"},[_c('p',[_v("["),_c('strong',[_v("This site was generated using "),_c('img',{attrs:{"src":"https://markbind.org/favicon.ico","width":"25"}}),_v(" "),_c('a',{attrs:{"href":"https://markbind.org/"}},[_v("MarkBind 4.1.0")])]),_v(" on Tue, May 2, 2023, 2:23:27 PM UTC]"),_c('br'),_v(" "),_c('span',{staticClass:"dimmed"},[_c('small',[_c('small',[_v("favicon.ico of this site was made by "),_c('a',{attrs:{"href":"https://www.flaticon.com/authors/smashicons","title":"Smashicons"}},[_v("Smashicons")]),_v(" from "),_c('a',{attrs:{"href":"https://www.flaticon.com/","title":"Flaticon"}},[_v("www.flaticon.com")]),_v(" is licensed by "),_c('a',{attrs:{"href":"http://creativecommons.org/licenses/by/3.0/","title":"Creative Commons BY 3.0","target":"_blank"}},[_v("CC 3.0 BY")])])])])])])])}
}];
  