
    var pageVueRenderFn = function anonymous(
) {
with(this){return _c('div',{attrs:{"id":"app"}},[_c('header',{attrs:{"fixed":""}},[_c('navbar',{attrs:{"placement":"top","type":"primary"},scopedSlots:_u([{key:"brand",fn:function(){return [_c('a',{staticClass:"navbar-brand",attrs:{"href":"/2023/index.html","title":"Home"}},[_v("CS3281&2-2023/Students")])]},proxy:true},{key:"right",fn:function(){return [_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"https://github.com/nus-cs3281/2023"}},[_c('span',[_c('span',{staticClass:"fab fa-github",attrs:{"aria-hidden":"true"}})])])])]},proxy:true}])},[_v(" "),_c('dropdown',{staticClass:"nav-link",scopedSlots:_u([{key:"header",fn:function(){return [_v("CS3281")]},proxy:true}])},[_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/2023/index.html"}},[_v("Students")])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/2023/students/knowledge.html"}},[_v("Knowledge")])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"https://nus-cs3281.github.io/2023-dashboard/?search=&sort=groupTitle&sortWithin=title&timeframe=commit&mergegroup=&groupSelect=groupByAuthors&breakdown=false"}},[_v("Code Dashboard")])])]),_v(" "),_c('dropdown',{staticClass:"nav-link",scopedSlots:_u([{key:"header",fn:function(){return [_v("CS3282")]},proxy:true}])},[_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/2023/cs3282-index.html"}},[_v("Students")])]),_v(" "),_c('li',[_c('a',{staticClass:"dropdown-item",attrs:{"href":"/2023/students/talksSchedule.html"}},[_v("Lightning Talks")])])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/2023/instructions.html"}},[_v("Instructions")])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"https://nus-cs3281.github.io/website/"}},[_v("CS3281&2 Website "),_c('span',[_c('span',{staticClass:"glyphicon glyphicon-share-alt",attrs:{"aria-hidden":"true"}})])])])],1)],1),_v(" "),_c('div',{attrs:{"id":"flex-body"}},[_c('div',{staticClass:"fixed-header-padding",attrs:{"id":"content-wrapper"}},[_m(0),_v(" "),_c('p',[_v("Ockam is a suite of open source programming libraries and command line tools that handles end-to-end encryption, mutual authentication, key management, credential management, and authorization policy enforcement.")]),_v(" "),_c('p',[_v("Modern applications are distributed and have an unwieldy number of interconnections that must trustfully exchange data. To trust data-in-motion, applications need end-to-end guarantees of data authenticity, integrity, and confidentiality. To be private and secure by-design, applications must have granular control over every trust and access decision. Ockam allows the app developer to add these controls and guarantees to any application.")]),_v(" "),_c('p',[_v("As of March 2023, Ockam has a total of 3K stars of Github, 203 OSS contributors (including me) and 272K downloads on Crate (Rust's Package Registry).")]),_v(" "),_m(1),_v(" "),_m(2),_v(" "),_c('p',[_v("The workflow for contributing to Ockam is pretty standard as far as open-source projects goes. A few things that I noticed that were really great were that the project maintainers were very helpful and the PRs were being reviewed quickly (often in less than 1 week's time).")]),_v(" "),_m(3),_v(" "),_c('p',[_v("Resources:")]),_v(" "),_m(4),_v(" "),_m(5),_v(" "),_c('p',[_v("I contributed mainly to the enhancement of the Ockam CLI.")]),_v(" "),_c('p',[_v("Merged PRs:")]),_v(" "),_c('ul',[_c('li',[_m(6),_v(" "),_c('p',[_v("This is a refactor PR that updates certain CLI hints in Ockam to be more intuitive.")]),_v(" "),_c('p',[_v("Original issue: "),_c('a',{attrs:{"href":"https://github.com/build-trust/ockam/issues/3149"}},[_v("Rename ockam tcp-listener create command arguments to --at "),_c('node',[_v(" and "),_c('address',[_v(" #3149")])])],1)])]),_v(" "),_m(7),_v(" "),_m(8)]),_v(" "),_m(9),_v(" "),_m(10),_v(" "),_m(11),_v(" "),_m(12),_v(" "),_m(13),_v(" "),_m(14),_v(" "),_c('p',[_v("Ockam's codebase is mainly written in Rust as it is more secure over other systems languages such as C++, while still retaining much of the performance benefits of being a low-level systems language which is important in the context of cryptographic operations.")]),_v(" "),_m(15),_v(" "),_m(16),_v(" "),_c('p',[_v("Cargo is Rust's build system and package manager. Most Rust projects use this tool because Cargo handles a lot of tasks for them, such as building code, downloading the libraries their code depends on, and building those libraries. Ockam also uses Cargo.")]),_v(" "),_m(17),_v(" "),_m(18),_v(" "),_c('p',[_v("This topic is relevant to my project since one of the main uses of Ockam is to allow app developers to easily introduce end-to-end encryption to their project.")]),_v(" "),_c('p',[_v("End-to-end encryption is a security method that basically ensures that only the sender and the receiver of a message are able to read the message. This means that any third-party intermediaries that the message passes through will not be able to read that message. In particular, it will mean that the government / relevant authorities will not be able to read that message.")]),_v(" "),_c('p',[_v("End-to-end encryption has become a really hot topic in security recently due to the greater awareness and focus on the topic of user privacy.")]),_v(" "),_c('p',[_v("Some relevant resources on end-to-end encryption:")]),_v(" "),_m(19),_v(" "),_m(20),_v(" "),_m(21),_v(" "),_m(22),_v(" "),_m(23),_v(" "),_c('p',[_v("Ockam uses a total of 17 Github Actions workflows to check various things when a PR is submitted such as style checks, commit message style check, ensuring that new tests were added and the tests passes, etc. I think there is still room to improve for Markbind in terms of using Github Actions to make certain checks. In particular, I think it would be helpful to have a workflow to check that commit messages follow the proper convention, since that is a pretty common issue that keeps coming up when reviewing PRs.")]),_v(" "),_m(24),_v(" "),_m(25),_v(" "),_c('i',{staticClass:"fa fa-arrow-circle-up fa-lg d-print-none",attrs:{"id":"scroll-top-button","onclick":"handleScrollTop()","aria-hidden":"true"}})]),_v(" "),_c('overlay-source',{staticClass:"fixed-header-padding",attrs:{"id":"page-nav","tag-name":"nav","to":"page-nav"}},[_c('div',{staticClass:"nav-component slim-scroll"})])],1),_v(" "),_m(26)])}
};
    var pageVueStaticRenderFns = [function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"project-ockam"}},[_c('span',{staticClass:"anchor",attrs:{"id":"project-ockam"}}),_v("Project: Ockam"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#project-ockam","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_c('a',{attrs:{"href":"https://github.com/build-trust/ockam"}},[_v("Project website")])])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"external-project-workflow"}},[_c('span',{staticClass:"anchor",attrs:{"id":"external-project-workflow"}}),_v("External Project Workflow"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#external-project-workflow","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('ol',[_c('li',[_v("Find an issue to work on, ideally issues that are tagged "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("good-first-issues")]),_v(".")]),_v(" "),_c('li',[_v("Work on fixing the bug\n"),_c('ul',[_c('li',[_v("If there are any setup issues, the Ockam team has set up a "),_c('a',{attrs:{"href":"https://github.com/build-trust/ockam/discussions/1642"}},[_v("discussion forum")]),_v(" to help troubleshoot any issues.")])])]),_v(" "),_c('li',[_v("Accept the "),_c('a',{attrs:{"href":"https://github.com/build-trust/ockam-contributors/blob/main/CLA.md"}},[_v("Ockam Contributor License Agreement")])]),_v(" "),_c('li',[_v("Craft proper commit messages.\n"),_c('ul',[_c('li',[_v("Each commit should have a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("type")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("scope")]),_v(". It should be organized as "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("type(scope): <subject>")]),_v(". For example "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("feat(rust): ...")]),_v(" or "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("refactor(elixer): ...")]),_v(".")])])]),_v(" "),_c('li',[_v("Work with PR reviewer to get the PR approved.")])])}
},function anonymous(
) {
with(this){return _c('ul',[_c('li',[_c('a',{attrs:{"href":"https://github.com/build-trust/.github/blob/main/CONTRIBUTING.md#contributing-to-ockam-on-github"}},[_v("Contributing Guide")])])])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"my-contributions"}},[_c('span',{staticClass:"anchor",attrs:{"id":"my-contributions"}}),_v("My Contributions"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#my-contributions","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_c('a',{attrs:{"href":"https://github.com/build-trust/ockam/pull/3194"}},[_v("refactor(rust): rename ockam tcp-listener create command arguments #3194")])])}
},function anonymous(
) {
with(this){return _c('li',[_c('p',[_c('a',{attrs:{"href":"https://github.com/build-trust/ockam/pull/3256"}},[_v("feat(rust): implement secure-channel-listener list command #3256")])]),_v(" "),_c('p',[_v("My second contribution is implementing a new feature in Ockam's CLI - the ability to create secure channel listeners. Basically the idea of secure channel listeners that they are secure components that are able to consume any event that passes through a secure channel. This allows users to create channel listeners that are more secure since all of the traffic will be end-to-end encrypted.")]),_v(" "),_c('p',[_v("This involved creating new structs in Rust for user commands to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("secure-channel-listener")]),_v(" command, interacting with the backend to modify secure channel listeners and doing proper error handling when the user supplies erroneous inputs. More details in the PR.")]),_v(" "),_c('p',[_v("Original issue: "),_c('a',{attrs:{"href":"https://github.com/build-trust/ockam/issues/3192"}},[_v("Implement ockam secure-channel-listener list command #3192")])])])}
},function anonymous(
) {
with(this){return _c('li',[_c('p',[_c('a',{attrs:{"href":"https://github.com/build-trust/ockam/pull/4120"}},[_v("refactor(rust): set default_node_name using clap #4120")])]),_v(" "),_c('p',[_v("My third contribution is a refactor code change that improves the code quality of Ockam's codebase by abstracting away the use of Optionals and replacing it with a utility function that handles the interaction with optional objects. Hence, a new developer would not have to be familiar with the proper way of handling optionals and could focus more on actual API development.")]),_v(" "),_c('p',[_v("Original issue: "),_c('a',{attrs:{"href":"https://github.com/build-trust/ockam/issues/4080"}},[_v("ockam node start command: set default value to node argument using Clap attributes #4080")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("In addition to all the merged PRs, I'm pleased to say that I have been recognized by the team at Ockam for my contributions during one of their "),_c('a',{attrs:{"href":"https://github.com/build-trust/ockam/discussions/3381"}},[_v("release")]),_v(" 🎉!")])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"my-learning-record"}},[_c('span',{staticClass:"anchor",attrs:{"id":"my-learning-record"}}),_v("My Learning Record"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#my-learning-record","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('h4',{attrs:{"id":"how-to-improve-visibility-of-the-project"}},[_c('span',{staticClass:"anchor",attrs:{"id":"how-to-improve-visibility-of-the-project"}}),_v("How to improve visibility of the project"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#how-to-improve-visibility-of-the-project","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_v("While Ockam as a project only started in 2021, it has now garnered over 3k stars on Github and hundreds of contributors have previously contributed to it. I think one of the main things that I saw the team at Ockam doing to improve the visibility of the project is to maintain a healthy supply of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("good-first-issues")]),_v(" issues.")])}
},function anonymous(
) {
with(this){return _c('p',[_v("This is because many sites such as "),_c('a',{attrs:{"href":"https://goodfirstissue.dev/"}},[_v("https://goodfirstissue.dev/")]),_v(" and "),_c('a',{attrs:{"href":"https://goodfirstissues.com/"}},[_v("https://goodfirstissues.com/")]),_v(" essentially scrapes Github repos for "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("good-first-issues")]),_v(" tag and highlights those projects with a higher number of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("good-first-issues")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('h4',{attrs:{"id":"rust"}},[_c('span',{staticClass:"anchor",attrs:{"id":"rust"}}),_v("Rust"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#rust","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_v("The main resource that I used for learning Rust is the "),_c('a',{attrs:{"href":"https://www.rust-lang.org/learn/get-started"}},[_v("official Rust website")]),_v(". There's a more comprehensive "),_c('a',{attrs:{"href":"https://doc.rust-lang.org/book/"}},[_v("textbook")]),_v(" that I occasionally referred to when investigating certain semantics of the language. In particular, as someone who is very into Programming Languages and Compilers, I really appreciated Rust's approach to safe memory management through what they call the Ownership System. This is beautifully explained in "),_c('a',{attrs:{"href":"https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html"}},[_v("Chapter 4 of the textbook")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('h4',{attrs:{"id":"cargo"}},[_c('span',{staticClass:"anchor",attrs:{"id":"cargo"}}),_v("Cargo"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#cargo","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_v("I really appreciated the fact that Cargo is shipped together with Rust as a bundle, since other similar languages such as C++ do not and it led to a lot of pain in finding the right build tool and package manager. The main resource that I used can be found in the "),_c('a',{attrs:{"href":"https://doc.rust-lang.org/book/ch01-03-hello-cargo.html"}},[_v("Rust textbook")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('h4',{attrs:{"id":"end-to-end-encryption"}},[_c('span',{staticClass:"anchor",attrs:{"id":"end-to-end-encryption"}}),_v("End-to-end Encryption"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#end-to-end-encryption","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('ul',[_c('li',[_c('a',{attrs:{"href":"https://en.wikipedia.org/wiki/End-to-end_encryption"}},[_v("End-to-end encryption wiki")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"https://faq.whatsapp.com/820124435853543"}},[_v("Whatsapp's end-to-end encryption")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"https://support.google.com/messages/answer/10262381?hl=en"}},[_v("Google's end-to-end encryption")])])])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"recommendations-for-markbind-project"}},[_c('span',{staticClass:"anchor",attrs:{"id":"recommendations-for-markbind-project"}}),_v("Recommendations for Markbind Project"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#recommendations-for-markbind-project","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('ol',[_c('li',[_v("Ensure that there is a healthy supply of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("good-first-issue")]),_v(" issues")])])}
},function anonymous(
) {
with(this){return _c('p',[_v("Seeing how Ockam was able to greatly improve its visibility by having a lot of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("good-first-issue")]),_v(" issues, it would be good to have a healthy supply of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("good-first-issue")]),_v(" issues for Markbind too. This would involve Markbind developers to leave certain low-hanging fruits for new contributors to tackle.")])}
},function anonymous(
) {
with(this){return _c('ol',{attrs:{"start":"2"}},[_c('li',[_v("Use Github Actions liberally to enforce checks")])])}
},function anonymous(
) {
with(this){return _c('ol',{attrs:{"start":"3"}},[_c('li',[_v("Tagging commits with the issue type")])])}
},function anonymous(
) {
with(this){return _c('p',[_v("Ockam enforces a convention for commits where the commit has to be tagged with a relevant issue type such as "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("feat")]),_v(" for feature, "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("fix")]),_v(" for bug fix, "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("refactor")]),_v(" for refactor and so on. I think this is a good way of organizing commits since one would know at a glance, what's the purpose of that commit. In addition, it would be easier when making a release since the commits are already properly tagged.")])}
},function anonymous(
) {
with(this){return _c('footer',[_c('div',{staticClass:"text-center"},[_c('p',[_v("["),_c('strong',[_v("This site was generated using "),_c('img',{attrs:{"src":"https://markbind.org/favicon.ico","width":"25"}}),_v(" "),_c('a',{attrs:{"href":"https://markbind.org/"}},[_v("MarkBind 4.1.0")])]),_v(" on Tue, May 2, 2023, 2:23:27 PM UTC]"),_c('br'),_v(" "),_c('span',{staticClass:"dimmed"},[_c('small',[_c('small',[_v("favicon.ico of this site was made by "),_c('a',{attrs:{"href":"https://www.flaticon.com/authors/smashicons","title":"Smashicons"}},[_v("Smashicons")]),_v(" from "),_c('a',{attrs:{"href":"https://www.flaticon.com/","title":"Flaticon"}},[_v("www.flaticon.com")]),_v(" is licensed by "),_c('a',{attrs:{"href":"http://creativecommons.org/licenses/by/3.0/","title":"Creative Commons BY 3.0","target":"_blank"}},[_v("CC 3.0 BY")])])])])])])])}
}];
  